syntax = "proto3";

// -----------------------------------------------------------------------------
// Options
// -----------------------------------------------------------------------------

package netspeak.generated; // Becomes C++ namespace
option java_package = "org.netspeak.generated";
option optimize_for = SPEED;

// -----------------------------------------------------------------------------
// Message definitions
// -----------------------------------------------------------------------------

// For internal usage only.
message Properties {

  message Property {

    string key = 1;
    string value = 2;
  }

  repeated Property properties = 1;
}

message Query {

  message Unit {

    enum Tag {
      WORD = 0;
      QMARK = 1;
      ASTERISK = 2;
      DICTSET = 3;
      ORDERSET = 4;
      OPTIONSET = 5;
      // normalized token tags
      QMARK_FOR_ASTERISK = 6;
      WORD_IN_DICTSET = 7;
      WORD_IN_ORDERSET = 8;
      WORD_IN_OPTIONSET = 9;
      PLUS = 10;
      QMARK_FOR_PLUS = 11;
      REGEXWORD = 12;
      WORD_FOR_REGEX = 13;
      WORD_FOR_REGEX_IN_ORDERSET = 14;
      WORD_FOR_REGEX_IN_OPTIONSET = 15;
      ASSOCIATION = 16;
    }

    Tag tag = 1;
    string text = 2;

    uint32 position = 3;  // Remove?
    uint64 frequency = 4; // Remove?
    double quantile = 5;  // Remove?
    uint32 pruning = 6;   // Remove?
  }

  repeated Unit units = 1;
}

message Phrase {

  message Word {

    enum Tag {
      WORD = 0;
      WORD_FOR_QMARK = 1;
      WORD_FOR_ASTERISK = 2;
      WORD_IN_DICTSET = 3;
      WORD_IN_ORDERSET = 4;
      WORD_IN_OPTIONSET = 5;
      WORD_FOR_PLUS = 6;
      WORD_FOR_REGEX = 7;
      WORD_FOR_REGEX_IN_ORDERSET = 8;
      WORD_FOR_REGEX_IN_OPTIONSET = 9;
    }

    Tag tag = 1;
    string text = 2;
  }

  uint64 id = 1;
  uint64 frequency = 2;
  repeated Word words = 3;
}

message Request {

  string query = 1;
  optional uint32 max_phrase_count = 2 [ default = 100 ];
  uint64 max_phrase_frequency = 3; // unbounded
  optional uint32 phrase_length_min = 4 [ default = 1 ];
  optional uint32 phrase_length_max = 5 [ default = 5 ];
  optional uint32 pruning_low = 6 [ default = 130000 ];        // [1]
  optional uint32 pruning_high = 7 [ default = 160000 ];       // [1]
  optional double quantile_low = 8 [ default = 0.5 ];          // before 1.3.x
  optional double quantile_high = 9 [ default = 0.8 ];         // before 1.3.x
  optional uint32 max_regexword_matches = 10 [ default = 10 ]; // 0 = unbounded
}

message QueryResult {

  message PhraseRef {

    uint32 query_id = 1;
    uint32 frequency = 2;
    uint32 length = 3;
    uint32 id = 4;
  }

  Query query = 1;
  Request request = 2;
  repeated PhraseRef reference = 3;
  Phrase phrase = 4;
  uint64 union_size = 5;
  repeated string unknown_word = 6;
}

// For internal usage only.
message RawResponse {

  Request request = 1;
  repeated string query_token = 2;
  Query query = 3;
  repeated QueryResult query_result = 4;
  uint32 error_code = 5;
  string error_message = 6;
}

message Response {

  Request request = 1;
  repeated string query_token = 2;
  Query query = 3;
  repeated Phrase phrase = 4;
  repeated string unknown_word = 5;
  uint64 total_union_size = 6;
  //@deprecated
  uint64 total_frequency = 7;
  uint64 resume_frequency = 8;
  uint32 error_code = 9;
  string error_message = 10;
}

// [1] Choose parameters
// pruning_low:
//  Defines the number of values to be evaluated for non-stopword postlists.
//  This value should be big enough to retrieve a satisfying result set.
// pruning_high:
//  Defines the number of values to be evaluated for stopword postlists.
//  This value should be big enough to retrieve a satisfying result set
//  for stopword queries. Example: "to be or *" should give 12 results.
