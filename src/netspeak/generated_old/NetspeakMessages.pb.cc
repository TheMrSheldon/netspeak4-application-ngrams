// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NetspeakMessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "NetspeakMessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace netspeak {
namespace generated {

namespace {

const ::google::protobuf::Descriptor* Properties_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Properties_reflection_ = NULL;
const ::google::protobuf::Descriptor* Properties_Property_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Properties_Property_reflection_ = NULL;
const ::google::protobuf::Descriptor* Query_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Query_reflection_ = NULL;
const ::google::protobuf::Descriptor* Query_Unit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Query_Unit_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Query_Unit_Tag_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Phrase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Phrase_reflection_ = NULL;
const ::google::protobuf::Descriptor* Phrase_Word_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Phrase_Word_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Phrase_Word_Tag_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryResult_PhraseRef_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryResult_PhraseRef_reflection_ = NULL;
const ::google::protobuf::Descriptor* RawResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RawResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_NetspeakMessages_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_NetspeakMessages_2eproto() {
  protobuf_AddDesc_NetspeakMessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "NetspeakMessages.proto");
  GOOGLE_CHECK(file != NULL);
  Properties_descriptor_ = file->message_type(0);
  static const int Properties_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Properties, property_),
  };
  Properties_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Properties_descriptor_,
      Properties::default_instance_,
      Properties_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Properties, _has_bits_[0]),
      -1,
      -1,
      sizeof(Properties),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Properties, _internal_metadata_),
      -1);
  Properties_Property_descriptor_ = Properties_descriptor_->nested_type(0);
  static const int Properties_Property_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Properties_Property, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Properties_Property, value_),
  };
  Properties_Property_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Properties_Property_descriptor_,
      Properties_Property::default_instance_,
      Properties_Property_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Properties_Property, _has_bits_[0]),
      -1,
      -1,
      sizeof(Properties_Property),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Properties_Property, _internal_metadata_),
      -1);
  Query_descriptor_ = file->message_type(1);
  static const int Query_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query, unit_),
  };
  Query_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Query_descriptor_,
      Query::default_instance_,
      Query_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query, _has_bits_[0]),
      -1,
      -1,
      sizeof(Query),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query, _internal_metadata_),
      -1);
  Query_Unit_descriptor_ = Query_descriptor_->nested_type(0);
  static const int Query_Unit_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query_Unit, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query_Unit, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query_Unit, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query_Unit, frequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query_Unit, quantile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query_Unit, pruning_),
  };
  Query_Unit_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Query_Unit_descriptor_,
      Query_Unit::default_instance_,
      Query_Unit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query_Unit, _has_bits_[0]),
      -1,
      -1,
      sizeof(Query_Unit),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query_Unit, _internal_metadata_),
      -1);
  Query_Unit_Tag_descriptor_ = Query_Unit_descriptor_->enum_type(0);
  Phrase_descriptor_ = file->message_type(2);
  static const int Phrase_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phrase, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phrase, frequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phrase, word_),
  };
  Phrase_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Phrase_descriptor_,
      Phrase::default_instance_,
      Phrase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phrase, _has_bits_[0]),
      -1,
      -1,
      sizeof(Phrase),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phrase, _internal_metadata_),
      -1);
  Phrase_Word_descriptor_ = Phrase_descriptor_->nested_type(0);
  static const int Phrase_Word_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phrase_Word, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phrase_Word, text_),
  };
  Phrase_Word_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Phrase_Word_descriptor_,
      Phrase_Word::default_instance_,
      Phrase_Word_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phrase_Word, _has_bits_[0]),
      -1,
      -1,
      sizeof(Phrase_Word),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phrase_Word, _internal_metadata_),
      -1);
  Phrase_Word_Tag_descriptor_ = Phrase_Word_descriptor_->enum_type(0);
  Request_descriptor_ = file->message_type(3);
  static const int Request_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, query_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, max_phrase_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, max_phrase_frequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, phrase_length_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, phrase_length_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, pruning_low_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, pruning_high_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, quantile_low_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, quantile_high_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, max_regexword_matches_),
  };
  Request_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _has_bits_[0]),
      -1,
      -1,
      sizeof(Request),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _internal_metadata_),
      -1);
  QueryResult_descriptor_ = file->message_type(4);
  static const int QueryResult_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult, query_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult, reference_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult, phrase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult, union_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult, unknown_word_),
  };
  QueryResult_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QueryResult_descriptor_,
      QueryResult::default_instance_,
      QueryResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult, _has_bits_[0]),
      -1,
      -1,
      sizeof(QueryResult),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult, _internal_metadata_),
      -1);
  QueryResult_PhraseRef_descriptor_ = QueryResult_descriptor_->nested_type(0);
  static const int QueryResult_PhraseRef_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_PhraseRef, query_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_PhraseRef, frequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_PhraseRef, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_PhraseRef, id_),
  };
  QueryResult_PhraseRef_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QueryResult_PhraseRef_descriptor_,
      QueryResult_PhraseRef::default_instance_,
      QueryResult_PhraseRef_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_PhraseRef, _has_bits_[0]),
      -1,
      -1,
      sizeof(QueryResult_PhraseRef),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_PhraseRef, _internal_metadata_),
      -1);
  RawResponse_descriptor_ = file->message_type(5);
  static const int RawResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawResponse, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawResponse, query_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawResponse, query_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawResponse, query_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawResponse, error_message_),
  };
  RawResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RawResponse_descriptor_,
      RawResponse::default_instance_,
      RawResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(RawResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawResponse, _internal_metadata_),
      -1);
  Response_descriptor_ = file->message_type(6);
  static const int Response_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, query_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, query_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, phrase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, unknown_word_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, total_union_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, total_frequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, resume_frequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, error_message_),
  };
  Response_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Response_descriptor_,
      Response::default_instance_,
      Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _has_bits_[0]),
      -1,
      -1,
      sizeof(Response),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_NetspeakMessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Properties_descriptor_, &Properties::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Properties_Property_descriptor_, &Properties_Property::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Query_descriptor_, &Query::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Query_Unit_descriptor_, &Query_Unit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Phrase_descriptor_, &Phrase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Phrase_Word_descriptor_, &Phrase_Word::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_descriptor_, &Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QueryResult_descriptor_, &QueryResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QueryResult_PhraseRef_descriptor_, &QueryResult_PhraseRef::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RawResponse_descriptor_, &RawResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Response_descriptor_, &Response::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_NetspeakMessages_2eproto() {
  delete Properties::default_instance_;
  delete Properties_reflection_;
  delete Properties_Property::default_instance_;
  delete Properties_Property_reflection_;
  delete Query::default_instance_;
  delete Query_reflection_;
  delete Query_Unit::default_instance_;
  delete Query_Unit_reflection_;
  delete Phrase::default_instance_;
  delete Phrase_reflection_;
  delete Phrase_Word::default_instance_;
  delete Phrase_Word_reflection_;
  delete Request::default_instance_;
  delete Request_reflection_;
  delete QueryResult::default_instance_;
  delete QueryResult_reflection_;
  delete QueryResult_PhraseRef::default_instance_;
  delete QueryResult_PhraseRef_reflection_;
  delete RawResponse::default_instance_;
  delete RawResponse_reflection_;
  delete Response::default_instance_;
  delete Response_reflection_;
}

void protobuf_AddDesc_NetspeakMessages_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_NetspeakMessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026NetspeakMessages.proto\022\022netspeak.gener"
    "ated\"o\n\nProperties\0229\n\010property\030\001 \003(\0132\'.n"
    "etspeak.generated.Properties.Property\032&\n"
    "\010Property\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"\231\004"
    "\n\005Query\022,\n\004unit\030\001 \003(\0132\036.netspeak.generat"
    "ed.Query.Unit\032\341\003\n\004Unit\0225\n\003tag\030\001 \001(\0162\".ne"
    "tspeak.generated.Query.Unit.Tag:\004WORD\022\014\n"
    "\004text\030\002 \001(\t\022\023\n\010position\030\003 \001(\r:\0010\022\024\n\tfreq"
    "uency\030\004 \001(\004:\0010\022\023\n\010quantile\030\005 \001(\001:\0010\022\022\n\007p"
    "runing\030\006 \001(\r:\0010\"\277\002\n\003Tag\022\010\n\004WORD\020\000\022\t\n\005QMA"
    "RK\020\001\022\014\n\010ASTERISK\020\002\022\013\n\007DICTSET\020\003\022\014\n\010ORDER"
    "SET\020\004\022\r\n\tOPTIONSET\020\005\022\026\n\022QMARK_FOR_ASTERI"
    "SK\020\006\022\023\n\017WORD_IN_DICTSET\020\007\022\024\n\020WORD_IN_ORD"
    "ERSET\020\010\022\025\n\021WORD_IN_OPTIONSET\020\t\022\010\n\004PLUS\020\n"
    "\022\022\n\016QMARK_FOR_PLUS\020\013\022\r\n\tREGEXWORD\020\014\022\022\n\016W"
    "ORD_FOR_REGEX\020\r\022\036\n\032WORD_FOR_REGEX_IN_ORD"
    "ERSET\020\016\022\037\n\033WORD_FOR_REGEX_IN_OPTIONSET\020\017"
    "\022\017\n\013ASSOCIATION\020\020\"\222\003\n\006Phrase\022\r\n\002id\030\001 \001(\004"
    ":\0010\022\024\n\tfrequency\030\002 \001(\004:\0010\022-\n\004word\030\003 \003(\0132"
    "\037.netspeak.generated.Phrase.Word\032\263\002\n\004Wor"
    "d\0226\n\003tag\030\001 \001(\0162#.netspeak.generated.Phra"
    "se.Word.Tag:\004WORD\022\014\n\004text\030\002 \001(\t\"\344\001\n\003Tag\022"
    "\010\n\004WORD\020\000\022\022\n\016WORD_FOR_QMARK\020\001\022\025\n\021WORD_FO"
    "R_ASTERISK\020\002\022\023\n\017WORD_IN_DICTSET\020\003\022\024\n\020WOR"
    "D_IN_ORDERSET\020\004\022\025\n\021WORD_IN_OPTIONSET\020\005\022\021"
    "\n\rWORD_FOR_PLUS\020\006\022\022\n\016WORD_FOR_REGEX\020\007\022\036\n"
    "\032WORD_FOR_REGEX_IN_ORDERSET\020\010\022\037\n\033WORD_FO"
    "R_REGEX_IN_OPTIONSET\020\t\"\251\002\n\007Request\022\r\n\005qu"
    "ery\030\001 \001(\t\022\035\n\020max_phrase_count\030\002 \001(\r:\003100"
    "\022\037\n\024max_phrase_frequency\030\003 \001(\004:\0010\022\034\n\021phr"
    "ase_length_min\030\004 \001(\r:\0011\022\034\n\021phrase_length"
    "_max\030\005 \001(\r:\0015\022\033\n\013pruning_low\030\006 \001(\r:\0061300"
    "00\022\034\n\014pruning_high\030\007 \001(\r:\006160000\022\031\n\014quan"
    "tile_low\030\010 \001(\001:\0030.5\022\032\n\rquantile_high\030\t \001"
    "(\001:\0030.8\022!\n\025max_regexword_matches\030\n \001(\r:\002"
    "10\"\326\002\n\013QueryResult\022(\n\005query\030\001 \001(\0132\031.nets"
    "peak.generated.Query\022,\n\007request\030\002 \001(\0132\033."
    "netspeak.generated.Request\022<\n\treference\030"
    "\003 \003(\0132).netspeak.generated.QueryResult.P"
    "hraseRef\022*\n\006phrase\030\004 \001(\0132\032.netspeak.gene"
    "rated.Phrase\022\025\n\nunion_size\030\005 \001(\004:\0010\022\024\n\014u"
    "nknown_word\030\006 \003(\t\032X\n\tPhraseRef\022\023\n\010query_"
    "id\030\001 \001(\r:\0010\022\024\n\tfrequency\030\002 \001(\r:\0010\022\021\n\006len"
    "gth\030\003 \001(\r:\0010\022\r\n\002id\030\004 \001(\r:\0010\"\337\001\n\013RawRespo"
    "nse\022,\n\007request\030\001 \001(\0132\033.netspeak.generate"
    "d.Request\022\023\n\013query_token\030\002 \003(\t\022(\n\005query\030"
    "\003 \001(\0132\031.netspeak.generated.Query\0225\n\014quer"
    "y_result\030\004 \003(\0132\037.netspeak.generated.Quer"
    "yResult\022\025\n\nerror_code\030\005 \001(\r:\0010\022\025\n\rerror_"
    "message\030\006 \001(\t\"\277\002\n\010Response\022,\n\007request\030\001 "
    "\001(\0132\033.netspeak.generated.Request\022\023\n\013quer"
    "y_token\030\002 \003(\t\022(\n\005query\030\003 \001(\0132\031.netspeak."
    "generated.Query\022*\n\006phrase\030\004 \003(\0132\032.netspe"
    "ak.generated.Phrase\022\024\n\014unknown_word\030\005 \003("
    "\t\022\033\n\020total_union_size\030\006 \001(\004:\0010\022\032\n\017total_"
    "frequency\030\007 \001(\004:\0010\022\033\n\020resume_frequency\030\010"
    " \001(\004:\0010\022\025\n\nerror_code\030\t \001(\r:\0010\022\027\n\rerror_"
    "message\030\n \001(\t:\000B\032\n\026org.netspeak.generate"
    "dH\001", 2323);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "NetspeakMessages.proto", &protobuf_RegisterTypes);
  Properties::default_instance_ = new Properties();
  Properties_Property::default_instance_ = new Properties_Property();
  Query::default_instance_ = new Query();
  Query_Unit::default_instance_ = new Query_Unit();
  Phrase::default_instance_ = new Phrase();
  Phrase_Word::default_instance_ = new Phrase_Word();
  Request::default_instance_ = new Request();
  QueryResult::default_instance_ = new QueryResult();
  QueryResult_PhraseRef::default_instance_ = new QueryResult_PhraseRef();
  RawResponse::default_instance_ = new RawResponse();
  Response::default_instance_ = new Response();
  Properties::default_instance_->InitAsDefaultInstance();
  Properties_Property::default_instance_->InitAsDefaultInstance();
  Query::default_instance_->InitAsDefaultInstance();
  Query_Unit::default_instance_->InitAsDefaultInstance();
  Phrase::default_instance_->InitAsDefaultInstance();
  Phrase_Word::default_instance_->InitAsDefaultInstance();
  Request::default_instance_->InitAsDefaultInstance();
  QueryResult::default_instance_->InitAsDefaultInstance();
  QueryResult_PhraseRef::default_instance_->InitAsDefaultInstance();
  RawResponse::default_instance_->InitAsDefaultInstance();
  Response::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_NetspeakMessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_NetspeakMessages_2eproto {
  StaticDescriptorInitializer_NetspeakMessages_2eproto() {
    protobuf_AddDesc_NetspeakMessages_2eproto();
  }
} static_descriptor_initializer_NetspeakMessages_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Properties_Property::kKeyFieldNumber;
const int Properties_Property::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Properties_Property::Properties_Property()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:netspeak.generated.Properties.Property)
}

void Properties_Property::InitAsDefaultInstance() {
}

Properties_Property::Properties_Property(const Properties_Property& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:netspeak.generated.Properties.Property)
}

void Properties_Property::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Properties_Property::~Properties_Property() {
  // @@protoc_insertion_point(destructor:netspeak.generated.Properties.Property)
  SharedDtor();
}

void Properties_Property::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Properties_Property::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Properties_Property::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Properties_Property_descriptor_;
}

const Properties_Property& Properties_Property::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetspeakMessages_2eproto();
  return *default_instance_;
}

Properties_Property* Properties_Property::default_instance_ = NULL;

Properties_Property* Properties_Property::New(::google::protobuf::Arena* arena) const {
  Properties_Property* n = new Properties_Property;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Properties_Property::Clear() {
// @@protoc_insertion_point(message_clear_start:netspeak.generated.Properties.Property)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_value()) {
      value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Properties_Property::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netspeak.generated.Properties.Property)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "netspeak.generated.Properties.Property.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "netspeak.generated.Properties.Property.value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netspeak.generated.Properties.Property)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netspeak.generated.Properties.Property)
  return false;
#undef DO_
}

void Properties_Property::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netspeak.generated.Properties.Property)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "netspeak.generated.Properties.Property.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "netspeak.generated.Properties.Property.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:netspeak.generated.Properties.Property)
}

::google::protobuf::uint8* Properties_Property::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:netspeak.generated.Properties.Property)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "netspeak.generated.Properties.Property.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "netspeak.generated.Properties.Property.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netspeak.generated.Properties.Property)
  return target;
}

int Properties_Property::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:netspeak.generated.Properties.Property)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Properties_Property::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netspeak.generated.Properties.Property)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Properties_Property* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Properties_Property>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netspeak.generated.Properties.Property)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netspeak.generated.Properties.Property)
    MergeFrom(*source);
  }
}

void Properties_Property::MergeFrom(const Properties_Property& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netspeak.generated.Properties.Property)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Properties_Property::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netspeak.generated.Properties.Property)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Properties_Property::CopyFrom(const Properties_Property& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netspeak.generated.Properties.Property)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Properties_Property::IsInitialized() const {

  return true;
}

void Properties_Property::Swap(Properties_Property* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Properties_Property::InternalSwap(Properties_Property* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Properties_Property::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Properties_Property_descriptor_;
  metadata.reflection = Properties_Property_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Properties::kPropertyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Properties::Properties()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:netspeak.generated.Properties)
}

void Properties::InitAsDefaultInstance() {
}

Properties::Properties(const Properties& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:netspeak.generated.Properties)
}

void Properties::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Properties::~Properties() {
  // @@protoc_insertion_point(destructor:netspeak.generated.Properties)
  SharedDtor();
}

void Properties::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Properties::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Properties::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Properties_descriptor_;
}

const Properties& Properties::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetspeakMessages_2eproto();
  return *default_instance_;
}

Properties* Properties::default_instance_ = NULL;

Properties* Properties::New(::google::protobuf::Arena* arena) const {
  Properties* n = new Properties;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Properties::Clear() {
// @@protoc_insertion_point(message_clear_start:netspeak.generated.Properties)
  property_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Properties::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netspeak.generated.Properties)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .netspeak.generated.Properties.Property property = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_property:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_property()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_property;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netspeak.generated.Properties)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netspeak.generated.Properties)
  return false;
#undef DO_
}

void Properties::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netspeak.generated.Properties)
  // repeated .netspeak.generated.Properties.Property property = 1;
  for (unsigned int i = 0, n = this->property_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->property(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:netspeak.generated.Properties)
}

::google::protobuf::uint8* Properties::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:netspeak.generated.Properties)
  // repeated .netspeak.generated.Properties.Property property = 1;
  for (unsigned int i = 0, n = this->property_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->property(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netspeak.generated.Properties)
  return target;
}

int Properties::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:netspeak.generated.Properties)
  int total_size = 0;

  // repeated .netspeak.generated.Properties.Property property = 1;
  total_size += 1 * this->property_size();
  for (int i = 0; i < this->property_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->property(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Properties::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netspeak.generated.Properties)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Properties* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Properties>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netspeak.generated.Properties)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netspeak.generated.Properties)
    MergeFrom(*source);
  }
}

void Properties::MergeFrom(const Properties& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netspeak.generated.Properties)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  property_.MergeFrom(from.property_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Properties::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netspeak.generated.Properties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Properties::CopyFrom(const Properties& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netspeak.generated.Properties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Properties::IsInitialized() const {

  return true;
}

void Properties::Swap(Properties* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Properties::InternalSwap(Properties* other) {
  property_.UnsafeArenaSwap(&other->property_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Properties::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Properties_descriptor_;
  metadata.reflection = Properties_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Properties_Property

// optional string key = 1;
bool Properties_Property::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Properties_Property::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void Properties_Property::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void Properties_Property::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& Properties_Property::key() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Properties.Property.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Properties_Property::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:netspeak.generated.Properties.Property.key)
}
 void Properties_Property::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:netspeak.generated.Properties.Property.key)
}
 void Properties_Property::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:netspeak.generated.Properties.Property.key)
}
 ::std::string* Properties_Property::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:netspeak.generated.Properties.Property.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Properties_Property::release_key() {
  // @@protoc_insertion_point(field_release:netspeak.generated.Properties.Property.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Properties_Property::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:netspeak.generated.Properties.Property.key)
}

// optional string value = 2;
bool Properties_Property::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Properties_Property::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void Properties_Property::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void Properties_Property::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
 const ::std::string& Properties_Property::value() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Properties.Property.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Properties_Property::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:netspeak.generated.Properties.Property.value)
}
 void Properties_Property::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:netspeak.generated.Properties.Property.value)
}
 void Properties_Property::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:netspeak.generated.Properties.Property.value)
}
 ::std::string* Properties_Property::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:netspeak.generated.Properties.Property.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Properties_Property::release_value() {
  // @@protoc_insertion_point(field_release:netspeak.generated.Properties.Property.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Properties_Property::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:netspeak.generated.Properties.Property.value)
}

// -------------------------------------------------------------------

// Properties

// repeated .netspeak.generated.Properties.Property property = 1;
int Properties::property_size() const {
  return property_.size();
}
void Properties::clear_property() {
  property_.Clear();
}
const ::netspeak::generated::Properties_Property& Properties::property(int index) const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Properties.property)
  return property_.Get(index);
}
::netspeak::generated::Properties_Property* Properties::mutable_property(int index) {
  // @@protoc_insertion_point(field_mutable:netspeak.generated.Properties.property)
  return property_.Mutable(index);
}
::netspeak::generated::Properties_Property* Properties::add_property() {
  // @@protoc_insertion_point(field_add:netspeak.generated.Properties.property)
  return property_.Add();
}
::google::protobuf::RepeatedPtrField< ::netspeak::generated::Properties_Property >*
Properties::mutable_property() {
  // @@protoc_insertion_point(field_mutable_list:netspeak.generated.Properties.property)
  return &property_;
}
const ::google::protobuf::RepeatedPtrField< ::netspeak::generated::Properties_Property >&
Properties::property() const {
  // @@protoc_insertion_point(field_list:netspeak.generated.Properties.property)
  return property_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Query_Unit_Tag_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Query_Unit_Tag_descriptor_;
}
bool Query_Unit_Tag_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Query_Unit_Tag Query_Unit::WORD;
const Query_Unit_Tag Query_Unit::QMARK;
const Query_Unit_Tag Query_Unit::ASTERISK;
const Query_Unit_Tag Query_Unit::DICTSET;
const Query_Unit_Tag Query_Unit::ORDERSET;
const Query_Unit_Tag Query_Unit::OPTIONSET;
const Query_Unit_Tag Query_Unit::QMARK_FOR_ASTERISK;
const Query_Unit_Tag Query_Unit::WORD_IN_DICTSET;
const Query_Unit_Tag Query_Unit::WORD_IN_ORDERSET;
const Query_Unit_Tag Query_Unit::WORD_IN_OPTIONSET;
const Query_Unit_Tag Query_Unit::PLUS;
const Query_Unit_Tag Query_Unit::QMARK_FOR_PLUS;
const Query_Unit_Tag Query_Unit::REGEXWORD;
const Query_Unit_Tag Query_Unit::WORD_FOR_REGEX;
const Query_Unit_Tag Query_Unit::WORD_FOR_REGEX_IN_ORDERSET;
const Query_Unit_Tag Query_Unit::WORD_FOR_REGEX_IN_OPTIONSET;
const Query_Unit_Tag Query_Unit::ASSOCIATION;
const Query_Unit_Tag Query_Unit::Tag_MIN;
const Query_Unit_Tag Query_Unit::Tag_MAX;
const int Query_Unit::Tag_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Query_Unit::kTagFieldNumber;
const int Query_Unit::kTextFieldNumber;
const int Query_Unit::kPositionFieldNumber;
const int Query_Unit::kFrequencyFieldNumber;
const int Query_Unit::kQuantileFieldNumber;
const int Query_Unit::kPruningFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Query_Unit::Query_Unit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:netspeak.generated.Query.Unit)
}

void Query_Unit::InitAsDefaultInstance() {
}

Query_Unit::Query_Unit(const Query_Unit& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:netspeak.generated.Query.Unit)
}

void Query_Unit::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  tag_ = 0;
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  position_ = 0u;
  frequency_ = GOOGLE_ULONGLONG(0);
  quantile_ = 0;
  pruning_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Query_Unit::~Query_Unit() {
  // @@protoc_insertion_point(destructor:netspeak.generated.Query.Unit)
  SharedDtor();
}

void Query_Unit::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Query_Unit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Query_Unit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Query_Unit_descriptor_;
}

const Query_Unit& Query_Unit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetspeakMessages_2eproto();
  return *default_instance_;
}

Query_Unit* Query_Unit::default_instance_ = NULL;

Query_Unit* Query_Unit::New(::google::protobuf::Arena* arena) const {
  Query_Unit* n = new Query_Unit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Query_Unit::Clear() {
// @@protoc_insertion_point(message_clear_start:netspeak.generated.Query.Unit)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Query_Unit, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Query_Unit*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(tag_, pruning_);
    if (has_text()) {
      text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Query_Unit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netspeak.generated.Query.Unit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .netspeak.generated.Query.Unit.Tag tag = 1 [default = WORD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::netspeak::generated::Query_Unit_Tag_IsValid(value)) {
            set_tag(static_cast< ::netspeak::generated::Query_Unit_Tag >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_text;
        break;
      }

      // optional string text = 2;
      case 2: {
        if (tag == 18) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "netspeak.generated.Query.Unit.text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_position;
        break;
      }

      // optional uint32 position = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_frequency;
        break;
      }

      // optional uint64 frequency = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_frequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &frequency_)));
          set_has_frequency();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_quantile;
        break;
      }

      // optional double quantile = 5 [default = 0];
      case 5: {
        if (tag == 41) {
         parse_quantile:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &quantile_)));
          set_has_quantile();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_pruning;
        break;
      }

      // optional uint32 pruning = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_pruning:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pruning_)));
          set_has_pruning();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netspeak.generated.Query.Unit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netspeak.generated.Query.Unit)
  return false;
#undef DO_
}

void Query_Unit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netspeak.generated.Query.Unit)
  // optional .netspeak.generated.Query.Unit.Tag tag = 1 [default = WORD];
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->tag(), output);
  }

  // optional string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "netspeak.generated.Query.Unit.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text(), output);
  }

  // optional uint32 position = 3 [default = 0];
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->position(), output);
  }

  // optional uint64 frequency = 4 [default = 0];
  if (has_frequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->frequency(), output);
  }

  // optional double quantile = 5 [default = 0];
  if (has_quantile()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->quantile(), output);
  }

  // optional uint32 pruning = 6 [default = 0];
  if (has_pruning()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->pruning(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:netspeak.generated.Query.Unit)
}

::google::protobuf::uint8* Query_Unit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:netspeak.generated.Query.Unit)
  // optional .netspeak.generated.Query.Unit.Tag tag = 1 [default = WORD];
  if (has_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->tag(), target);
  }

  // optional string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "netspeak.generated.Query.Unit.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  // optional uint32 position = 3 [default = 0];
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->position(), target);
  }

  // optional uint64 frequency = 4 [default = 0];
  if (has_frequency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->frequency(), target);
  }

  // optional double quantile = 5 [default = 0];
  if (has_quantile()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->quantile(), target);
  }

  // optional uint32 pruning = 6 [default = 0];
  if (has_pruning()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->pruning(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netspeak.generated.Query.Unit)
  return target;
}

int Query_Unit::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:netspeak.generated.Query.Unit)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional .netspeak.generated.Query.Unit.Tag tag = 1 [default = WORD];
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tag());
    }

    // optional string text = 2;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional uint32 position = 3 [default = 0];
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position());
    }

    // optional uint64 frequency = 4 [default = 0];
    if (has_frequency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->frequency());
    }

    // optional double quantile = 5 [default = 0];
    if (has_quantile()) {
      total_size += 1 + 8;
    }

    // optional uint32 pruning = 6 [default = 0];
    if (has_pruning()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pruning());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Query_Unit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netspeak.generated.Query.Unit)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Query_Unit* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Query_Unit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netspeak.generated.Query.Unit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netspeak.generated.Query.Unit)
    MergeFrom(*source);
  }
}

void Query_Unit::MergeFrom(const Query_Unit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netspeak.generated.Query.Unit)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_text()) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_frequency()) {
      set_frequency(from.frequency());
    }
    if (from.has_quantile()) {
      set_quantile(from.quantile());
    }
    if (from.has_pruning()) {
      set_pruning(from.pruning());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Query_Unit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netspeak.generated.Query.Unit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Query_Unit::CopyFrom(const Query_Unit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netspeak.generated.Query.Unit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Query_Unit::IsInitialized() const {

  return true;
}

void Query_Unit::Swap(Query_Unit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Query_Unit::InternalSwap(Query_Unit* other) {
  std::swap(tag_, other->tag_);
  text_.Swap(&other->text_);
  std::swap(position_, other->position_);
  std::swap(frequency_, other->frequency_);
  std::swap(quantile_, other->quantile_);
  std::swap(pruning_, other->pruning_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Query_Unit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Query_Unit_descriptor_;
  metadata.reflection = Query_Unit_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Query::kUnitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Query::Query()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:netspeak.generated.Query)
}

void Query::InitAsDefaultInstance() {
}

Query::Query(const Query& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:netspeak.generated.Query)
}

void Query::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Query::~Query() {
  // @@protoc_insertion_point(destructor:netspeak.generated.Query)
  SharedDtor();
}

void Query::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Query::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Query::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Query_descriptor_;
}

const Query& Query::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetspeakMessages_2eproto();
  return *default_instance_;
}

Query* Query::default_instance_ = NULL;

Query* Query::New(::google::protobuf::Arena* arena) const {
  Query* n = new Query;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Query::Clear() {
// @@protoc_insertion_point(message_clear_start:netspeak.generated.Query)
  unit_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Query::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netspeak.generated.Query)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .netspeak.generated.Query.Unit unit = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_unit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_unit()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_unit;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netspeak.generated.Query)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netspeak.generated.Query)
  return false;
#undef DO_
}

void Query::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netspeak.generated.Query)
  // repeated .netspeak.generated.Query.Unit unit = 1;
  for (unsigned int i = 0, n = this->unit_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->unit(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:netspeak.generated.Query)
}

::google::protobuf::uint8* Query::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:netspeak.generated.Query)
  // repeated .netspeak.generated.Query.Unit unit = 1;
  for (unsigned int i = 0, n = this->unit_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->unit(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netspeak.generated.Query)
  return target;
}

int Query::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:netspeak.generated.Query)
  int total_size = 0;

  // repeated .netspeak.generated.Query.Unit unit = 1;
  total_size += 1 * this->unit_size();
  for (int i = 0; i < this->unit_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->unit(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Query::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netspeak.generated.Query)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Query* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Query>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netspeak.generated.Query)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netspeak.generated.Query)
    MergeFrom(*source);
  }
}

void Query::MergeFrom(const Query& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netspeak.generated.Query)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  unit_.MergeFrom(from.unit_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Query::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netspeak.generated.Query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Query::CopyFrom(const Query& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netspeak.generated.Query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Query::IsInitialized() const {

  return true;
}

void Query::Swap(Query* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Query::InternalSwap(Query* other) {
  unit_.UnsafeArenaSwap(&other->unit_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Query::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Query_descriptor_;
  metadata.reflection = Query_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Query_Unit

// optional .netspeak.generated.Query.Unit.Tag tag = 1 [default = WORD];
bool Query_Unit::has_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Query_Unit::set_has_tag() {
  _has_bits_[0] |= 0x00000001u;
}
void Query_Unit::clear_has_tag() {
  _has_bits_[0] &= ~0x00000001u;
}
void Query_Unit::clear_tag() {
  tag_ = 0;
  clear_has_tag();
}
 ::netspeak::generated::Query_Unit_Tag Query_Unit::tag() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Query.Unit.tag)
  return static_cast< ::netspeak::generated::Query_Unit_Tag >(tag_);
}
 void Query_Unit::set_tag(::netspeak::generated::Query_Unit_Tag value) {
  assert(::netspeak::generated::Query_Unit_Tag_IsValid(value));
  set_has_tag();
  tag_ = value;
  // @@protoc_insertion_point(field_set:netspeak.generated.Query.Unit.tag)
}

// optional string text = 2;
bool Query_Unit::has_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Query_Unit::set_has_text() {
  _has_bits_[0] |= 0x00000002u;
}
void Query_Unit::clear_has_text() {
  _has_bits_[0] &= ~0x00000002u;
}
void Query_Unit::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
 const ::std::string& Query_Unit::text() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Query.Unit.text)
  return text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Query_Unit::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:netspeak.generated.Query.Unit.text)
}
 void Query_Unit::set_text(const char* value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:netspeak.generated.Query.Unit.text)
}
 void Query_Unit::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:netspeak.generated.Query.Unit.text)
}
 ::std::string* Query_Unit::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:netspeak.generated.Query.Unit.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Query_Unit::release_text() {
  // @@protoc_insertion_point(field_release:netspeak.generated.Query.Unit.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Query_Unit::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:netspeak.generated.Query.Unit.text)
}

// optional uint32 position = 3 [default = 0];
bool Query_Unit::has_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Query_Unit::set_has_position() {
  _has_bits_[0] |= 0x00000004u;
}
void Query_Unit::clear_has_position() {
  _has_bits_[0] &= ~0x00000004u;
}
void Query_Unit::clear_position() {
  position_ = 0u;
  clear_has_position();
}
 ::google::protobuf::uint32 Query_Unit::position() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Query.Unit.position)
  return position_;
}
 void Query_Unit::set_position(::google::protobuf::uint32 value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:netspeak.generated.Query.Unit.position)
}

// optional uint64 frequency = 4 [default = 0];
bool Query_Unit::has_frequency() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Query_Unit::set_has_frequency() {
  _has_bits_[0] |= 0x00000008u;
}
void Query_Unit::clear_has_frequency() {
  _has_bits_[0] &= ~0x00000008u;
}
void Query_Unit::clear_frequency() {
  frequency_ = GOOGLE_ULONGLONG(0);
  clear_has_frequency();
}
 ::google::protobuf::uint64 Query_Unit::frequency() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Query.Unit.frequency)
  return frequency_;
}
 void Query_Unit::set_frequency(::google::protobuf::uint64 value) {
  set_has_frequency();
  frequency_ = value;
  // @@protoc_insertion_point(field_set:netspeak.generated.Query.Unit.frequency)
}

// optional double quantile = 5 [default = 0];
bool Query_Unit::has_quantile() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Query_Unit::set_has_quantile() {
  _has_bits_[0] |= 0x00000010u;
}
void Query_Unit::clear_has_quantile() {
  _has_bits_[0] &= ~0x00000010u;
}
void Query_Unit::clear_quantile() {
  quantile_ = 0;
  clear_has_quantile();
}
 double Query_Unit::quantile() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Query.Unit.quantile)
  return quantile_;
}
 void Query_Unit::set_quantile(double value) {
  set_has_quantile();
  quantile_ = value;
  // @@protoc_insertion_point(field_set:netspeak.generated.Query.Unit.quantile)
}

// optional uint32 pruning = 6 [default = 0];
bool Query_Unit::has_pruning() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Query_Unit::set_has_pruning() {
  _has_bits_[0] |= 0x00000020u;
}
void Query_Unit::clear_has_pruning() {
  _has_bits_[0] &= ~0x00000020u;
}
void Query_Unit::clear_pruning() {
  pruning_ = 0u;
  clear_has_pruning();
}
 ::google::protobuf::uint32 Query_Unit::pruning() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Query.Unit.pruning)
  return pruning_;
}
 void Query_Unit::set_pruning(::google::protobuf::uint32 value) {
  set_has_pruning();
  pruning_ = value;
  // @@protoc_insertion_point(field_set:netspeak.generated.Query.Unit.pruning)
}

// -------------------------------------------------------------------

// Query

// repeated .netspeak.generated.Query.Unit unit = 1;
int Query::unit_size() const {
  return unit_.size();
}
void Query::clear_unit() {
  unit_.Clear();
}
const ::netspeak::generated::Query_Unit& Query::unit(int index) const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Query.unit)
  return unit_.Get(index);
}
::netspeak::generated::Query_Unit* Query::mutable_unit(int index) {
  // @@protoc_insertion_point(field_mutable:netspeak.generated.Query.unit)
  return unit_.Mutable(index);
}
::netspeak::generated::Query_Unit* Query::add_unit() {
  // @@protoc_insertion_point(field_add:netspeak.generated.Query.unit)
  return unit_.Add();
}
::google::protobuf::RepeatedPtrField< ::netspeak::generated::Query_Unit >*
Query::mutable_unit() {
  // @@protoc_insertion_point(field_mutable_list:netspeak.generated.Query.unit)
  return &unit_;
}
const ::google::protobuf::RepeatedPtrField< ::netspeak::generated::Query_Unit >&
Query::unit() const {
  // @@protoc_insertion_point(field_list:netspeak.generated.Query.unit)
  return unit_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Phrase_Word_Tag_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Phrase_Word_Tag_descriptor_;
}
bool Phrase_Word_Tag_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Phrase_Word_Tag Phrase_Word::WORD;
const Phrase_Word_Tag Phrase_Word::WORD_FOR_QMARK;
const Phrase_Word_Tag Phrase_Word::WORD_FOR_ASTERISK;
const Phrase_Word_Tag Phrase_Word::WORD_IN_DICTSET;
const Phrase_Word_Tag Phrase_Word::WORD_IN_ORDERSET;
const Phrase_Word_Tag Phrase_Word::WORD_IN_OPTIONSET;
const Phrase_Word_Tag Phrase_Word::WORD_FOR_PLUS;
const Phrase_Word_Tag Phrase_Word::WORD_FOR_REGEX;
const Phrase_Word_Tag Phrase_Word::WORD_FOR_REGEX_IN_ORDERSET;
const Phrase_Word_Tag Phrase_Word::WORD_FOR_REGEX_IN_OPTIONSET;
const Phrase_Word_Tag Phrase_Word::Tag_MIN;
const Phrase_Word_Tag Phrase_Word::Tag_MAX;
const int Phrase_Word::Tag_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Phrase_Word::kTagFieldNumber;
const int Phrase_Word::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Phrase_Word::Phrase_Word()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:netspeak.generated.Phrase.Word)
}

void Phrase_Word::InitAsDefaultInstance() {
}

Phrase_Word::Phrase_Word(const Phrase_Word& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:netspeak.generated.Phrase.Word)
}

void Phrase_Word::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  tag_ = 0;
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Phrase_Word::~Phrase_Word() {
  // @@protoc_insertion_point(destructor:netspeak.generated.Phrase.Word)
  SharedDtor();
}

void Phrase_Word::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Phrase_Word::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Phrase_Word::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Phrase_Word_descriptor_;
}

const Phrase_Word& Phrase_Word::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetspeakMessages_2eproto();
  return *default_instance_;
}

Phrase_Word* Phrase_Word::default_instance_ = NULL;

Phrase_Word* Phrase_Word::New(::google::protobuf::Arena* arena) const {
  Phrase_Word* n = new Phrase_Word;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Phrase_Word::Clear() {
// @@protoc_insertion_point(message_clear_start:netspeak.generated.Phrase.Word)
  if (_has_bits_[0 / 32] & 3u) {
    tag_ = 0;
    if (has_text()) {
      text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Phrase_Word::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netspeak.generated.Phrase.Word)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .netspeak.generated.Phrase.Word.Tag tag = 1 [default = WORD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::netspeak::generated::Phrase_Word_Tag_IsValid(value)) {
            set_tag(static_cast< ::netspeak::generated::Phrase_Word_Tag >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_text;
        break;
      }

      // optional string text = 2;
      case 2: {
        if (tag == 18) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "netspeak.generated.Phrase.Word.text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netspeak.generated.Phrase.Word)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netspeak.generated.Phrase.Word)
  return false;
#undef DO_
}

void Phrase_Word::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netspeak.generated.Phrase.Word)
  // optional .netspeak.generated.Phrase.Word.Tag tag = 1 [default = WORD];
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->tag(), output);
  }

  // optional string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "netspeak.generated.Phrase.Word.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:netspeak.generated.Phrase.Word)
}

::google::protobuf::uint8* Phrase_Word::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:netspeak.generated.Phrase.Word)
  // optional .netspeak.generated.Phrase.Word.Tag tag = 1 [default = WORD];
  if (has_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->tag(), target);
  }

  // optional string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "netspeak.generated.Phrase.Word.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netspeak.generated.Phrase.Word)
  return target;
}

int Phrase_Word::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:netspeak.generated.Phrase.Word)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .netspeak.generated.Phrase.Word.Tag tag = 1 [default = WORD];
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tag());
    }

    // optional string text = 2;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Phrase_Word::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netspeak.generated.Phrase.Word)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Phrase_Word* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Phrase_Word>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netspeak.generated.Phrase.Word)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netspeak.generated.Phrase.Word)
    MergeFrom(*source);
  }
}

void Phrase_Word::MergeFrom(const Phrase_Word& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netspeak.generated.Phrase.Word)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_text()) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Phrase_Word::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netspeak.generated.Phrase.Word)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Phrase_Word::CopyFrom(const Phrase_Word& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netspeak.generated.Phrase.Word)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Phrase_Word::IsInitialized() const {

  return true;
}

void Phrase_Word::Swap(Phrase_Word* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Phrase_Word::InternalSwap(Phrase_Word* other) {
  std::swap(tag_, other->tag_);
  text_.Swap(&other->text_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Phrase_Word::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Phrase_Word_descriptor_;
  metadata.reflection = Phrase_Word_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Phrase::kIdFieldNumber;
const int Phrase::kFrequencyFieldNumber;
const int Phrase::kWordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Phrase::Phrase()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:netspeak.generated.Phrase)
}

void Phrase::InitAsDefaultInstance() {
}

Phrase::Phrase(const Phrase& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:netspeak.generated.Phrase)
}

void Phrase::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  frequency_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Phrase::~Phrase() {
  // @@protoc_insertion_point(destructor:netspeak.generated.Phrase)
  SharedDtor();
}

void Phrase::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Phrase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Phrase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Phrase_descriptor_;
}

const Phrase& Phrase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetspeakMessages_2eproto();
  return *default_instance_;
}

Phrase* Phrase::default_instance_ = NULL;

Phrase* Phrase::New(::google::protobuf::Arena* arena) const {
  Phrase* n = new Phrase;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Phrase::Clear() {
// @@protoc_insertion_point(message_clear_start:netspeak.generated.Phrase)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Phrase, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Phrase*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, frequency_);

#undef ZR_HELPER_
#undef ZR_

  word_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Phrase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netspeak.generated.Phrase)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_frequency;
        break;
      }

      // optional uint64 frequency = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_frequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &frequency_)));
          set_has_frequency();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_word;
        break;
      }

      // repeated .netspeak.generated.Phrase.Word word = 3;
      case 3: {
        if (tag == 26) {
         parse_word:
          DO_(input->IncrementRecursionDepth());
         parse_loop_word:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_word()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_word;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netspeak.generated.Phrase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netspeak.generated.Phrase)
  return false;
#undef DO_
}

void Phrase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netspeak.generated.Phrase)
  // optional uint64 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint64 frequency = 2 [default = 0];
  if (has_frequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->frequency(), output);
  }

  // repeated .netspeak.generated.Phrase.Word word = 3;
  for (unsigned int i = 0, n = this->word_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->word(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:netspeak.generated.Phrase)
}

::google::protobuf::uint8* Phrase::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:netspeak.generated.Phrase)
  // optional uint64 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint64 frequency = 2 [default = 0];
  if (has_frequency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->frequency(), target);
  }

  // repeated .netspeak.generated.Phrase.Word word = 3;
  for (unsigned int i = 0, n = this->word_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->word(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netspeak.generated.Phrase)
  return target;
}

int Phrase::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:netspeak.generated.Phrase)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint64 frequency = 2 [default = 0];
    if (has_frequency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->frequency());
    }

  }
  // repeated .netspeak.generated.Phrase.Word word = 3;
  total_size += 1 * this->word_size();
  for (int i = 0; i < this->word_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->word(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Phrase::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netspeak.generated.Phrase)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Phrase* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Phrase>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netspeak.generated.Phrase)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netspeak.generated.Phrase)
    MergeFrom(*source);
  }
}

void Phrase::MergeFrom(const Phrase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netspeak.generated.Phrase)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  word_.MergeFrom(from.word_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_frequency()) {
      set_frequency(from.frequency());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Phrase::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netspeak.generated.Phrase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Phrase::CopyFrom(const Phrase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netspeak.generated.Phrase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Phrase::IsInitialized() const {

  return true;
}

void Phrase::Swap(Phrase* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Phrase::InternalSwap(Phrase* other) {
  std::swap(id_, other->id_);
  std::swap(frequency_, other->frequency_);
  word_.UnsafeArenaSwap(&other->word_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Phrase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Phrase_descriptor_;
  metadata.reflection = Phrase_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Phrase_Word

// optional .netspeak.generated.Phrase.Word.Tag tag = 1 [default = WORD];
bool Phrase_Word::has_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Phrase_Word::set_has_tag() {
  _has_bits_[0] |= 0x00000001u;
}
void Phrase_Word::clear_has_tag() {
  _has_bits_[0] &= ~0x00000001u;
}
void Phrase_Word::clear_tag() {
  tag_ = 0;
  clear_has_tag();
}
 ::netspeak::generated::Phrase_Word_Tag Phrase_Word::tag() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Phrase.Word.tag)
  return static_cast< ::netspeak::generated::Phrase_Word_Tag >(tag_);
}
 void Phrase_Word::set_tag(::netspeak::generated::Phrase_Word_Tag value) {
  assert(::netspeak::generated::Phrase_Word_Tag_IsValid(value));
  set_has_tag();
  tag_ = value;
  // @@protoc_insertion_point(field_set:netspeak.generated.Phrase.Word.tag)
}

// optional string text = 2;
bool Phrase_Word::has_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Phrase_Word::set_has_text() {
  _has_bits_[0] |= 0x00000002u;
}
void Phrase_Word::clear_has_text() {
  _has_bits_[0] &= ~0x00000002u;
}
void Phrase_Word::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
 const ::std::string& Phrase_Word::text() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Phrase.Word.text)
  return text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Phrase_Word::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:netspeak.generated.Phrase.Word.text)
}
 void Phrase_Word::set_text(const char* value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:netspeak.generated.Phrase.Word.text)
}
 void Phrase_Word::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:netspeak.generated.Phrase.Word.text)
}
 ::std::string* Phrase_Word::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:netspeak.generated.Phrase.Word.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Phrase_Word::release_text() {
  // @@protoc_insertion_point(field_release:netspeak.generated.Phrase.Word.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Phrase_Word::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:netspeak.generated.Phrase.Word.text)
}

// -------------------------------------------------------------------

// Phrase

// optional uint64 id = 1 [default = 0];
bool Phrase::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Phrase::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Phrase::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Phrase::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
 ::google::protobuf::uint64 Phrase::id() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Phrase.id)
  return id_;
}
 void Phrase::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:netspeak.generated.Phrase.id)
}

// optional uint64 frequency = 2 [default = 0];
bool Phrase::has_frequency() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Phrase::set_has_frequency() {
  _has_bits_[0] |= 0x00000002u;
}
void Phrase::clear_has_frequency() {
  _has_bits_[0] &= ~0x00000002u;
}
void Phrase::clear_frequency() {
  frequency_ = GOOGLE_ULONGLONG(0);
  clear_has_frequency();
}
 ::google::protobuf::uint64 Phrase::frequency() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Phrase.frequency)
  return frequency_;
}
 void Phrase::set_frequency(::google::protobuf::uint64 value) {
  set_has_frequency();
  frequency_ = value;
  // @@protoc_insertion_point(field_set:netspeak.generated.Phrase.frequency)
}

// repeated .netspeak.generated.Phrase.Word word = 3;
int Phrase::word_size() const {
  return word_.size();
}
void Phrase::clear_word() {
  word_.Clear();
}
const ::netspeak::generated::Phrase_Word& Phrase::word(int index) const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Phrase.word)
  return word_.Get(index);
}
::netspeak::generated::Phrase_Word* Phrase::mutable_word(int index) {
  // @@protoc_insertion_point(field_mutable:netspeak.generated.Phrase.word)
  return word_.Mutable(index);
}
::netspeak::generated::Phrase_Word* Phrase::add_word() {
  // @@protoc_insertion_point(field_add:netspeak.generated.Phrase.word)
  return word_.Add();
}
::google::protobuf::RepeatedPtrField< ::netspeak::generated::Phrase_Word >*
Phrase::mutable_word() {
  // @@protoc_insertion_point(field_mutable_list:netspeak.generated.Phrase.word)
  return &word_;
}
const ::google::protobuf::RepeatedPtrField< ::netspeak::generated::Phrase_Word >&
Phrase::word() const {
  // @@protoc_insertion_point(field_list:netspeak.generated.Phrase.word)
  return word_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request::kQueryFieldNumber;
const int Request::kMaxPhraseCountFieldNumber;
const int Request::kMaxPhraseFrequencyFieldNumber;
const int Request::kPhraseLengthMinFieldNumber;
const int Request::kPhraseLengthMaxFieldNumber;
const int Request::kPruningLowFieldNumber;
const int Request::kPruningHighFieldNumber;
const int Request::kQuantileLowFieldNumber;
const int Request::kQuantileHighFieldNumber;
const int Request::kMaxRegexwordMatchesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request::Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:netspeak.generated.Request)
}

void Request::InitAsDefaultInstance() {
}

Request::Request(const Request& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:netspeak.generated.Request)
}

void Request::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_phrase_count_ = 100u;
  max_phrase_frequency_ = GOOGLE_ULONGLONG(0);
  phrase_length_min_ = 1u;
  phrase_length_max_ = 5u;
  pruning_low_ = 130000u;
  pruning_high_ = 160000u;
  quantile_low_ = 0.5;
  quantile_high_ = 0.8;
  max_regexword_matches_ = 10u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:netspeak.generated.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetspeakMessages_2eproto();
  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New(::google::protobuf::Arena* arena) const {
  Request* n = new Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:netspeak.generated.Request)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_query()) {
      query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    max_phrase_count_ = 100u;
    max_phrase_frequency_ = GOOGLE_ULONGLONG(0);
    phrase_length_min_ = 1u;
    phrase_length_max_ = 5u;
    pruning_low_ = 130000u;
    pruning_high_ = 160000u;
    quantile_low_ = 0.5;
  }
  if (_has_bits_[8 / 32] & 768u) {
    quantile_high_ = 0.8;
    max_regexword_matches_ = 10u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netspeak.generated.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string query = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->query().data(), this->query().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "netspeak.generated.Request.query");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_max_phrase_count;
        break;
      }

      // optional uint32 max_phrase_count = 2 [default = 100];
      case 2: {
        if (tag == 16) {
         parse_max_phrase_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_phrase_count_)));
          set_has_max_phrase_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_max_phrase_frequency;
        break;
      }

      // optional uint64 max_phrase_frequency = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_max_phrase_frequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_phrase_frequency_)));
          set_has_max_phrase_frequency();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_phrase_length_min;
        break;
      }

      // optional uint32 phrase_length_min = 4 [default = 1];
      case 4: {
        if (tag == 32) {
         parse_phrase_length_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phrase_length_min_)));
          set_has_phrase_length_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_phrase_length_max;
        break;
      }

      // optional uint32 phrase_length_max = 5 [default = 5];
      case 5: {
        if (tag == 40) {
         parse_phrase_length_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phrase_length_max_)));
          set_has_phrase_length_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_pruning_low;
        break;
      }

      // optional uint32 pruning_low = 6 [default = 130000];
      case 6: {
        if (tag == 48) {
         parse_pruning_low:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pruning_low_)));
          set_has_pruning_low();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_pruning_high;
        break;
      }

      // optional uint32 pruning_high = 7 [default = 160000];
      case 7: {
        if (tag == 56) {
         parse_pruning_high:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pruning_high_)));
          set_has_pruning_high();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_quantile_low;
        break;
      }

      // optional double quantile_low = 8 [default = 0.5];
      case 8: {
        if (tag == 65) {
         parse_quantile_low:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &quantile_low_)));
          set_has_quantile_low();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_quantile_high;
        break;
      }

      // optional double quantile_high = 9 [default = 0.8];
      case 9: {
        if (tag == 73) {
         parse_quantile_high:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &quantile_high_)));
          set_has_quantile_high();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_max_regexword_matches;
        break;
      }

      // optional uint32 max_regexword_matches = 10 [default = 10];
      case 10: {
        if (tag == 80) {
         parse_max_regexword_matches:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_regexword_matches_)));
          set_has_max_regexword_matches();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netspeak.generated.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netspeak.generated.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netspeak.generated.Request)
  // optional string query = 1;
  if (has_query()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "netspeak.generated.Request.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->query(), output);
  }

  // optional uint32 max_phrase_count = 2 [default = 100];
  if (has_max_phrase_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->max_phrase_count(), output);
  }

  // optional uint64 max_phrase_frequency = 3 [default = 0];
  if (has_max_phrase_frequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->max_phrase_frequency(), output);
  }

  // optional uint32 phrase_length_min = 4 [default = 1];
  if (has_phrase_length_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->phrase_length_min(), output);
  }

  // optional uint32 phrase_length_max = 5 [default = 5];
  if (has_phrase_length_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->phrase_length_max(), output);
  }

  // optional uint32 pruning_low = 6 [default = 130000];
  if (has_pruning_low()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->pruning_low(), output);
  }

  // optional uint32 pruning_high = 7 [default = 160000];
  if (has_pruning_high()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->pruning_high(), output);
  }

  // optional double quantile_low = 8 [default = 0.5];
  if (has_quantile_low()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->quantile_low(), output);
  }

  // optional double quantile_high = 9 [default = 0.8];
  if (has_quantile_high()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->quantile_high(), output);
  }

  // optional uint32 max_regexword_matches = 10 [default = 10];
  if (has_max_regexword_matches()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->max_regexword_matches(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:netspeak.generated.Request)
}

::google::protobuf::uint8* Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:netspeak.generated.Request)
  // optional string query = 1;
  if (has_query()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "netspeak.generated.Request.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->query(), target);
  }

  // optional uint32 max_phrase_count = 2 [default = 100];
  if (has_max_phrase_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->max_phrase_count(), target);
  }

  // optional uint64 max_phrase_frequency = 3 [default = 0];
  if (has_max_phrase_frequency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->max_phrase_frequency(), target);
  }

  // optional uint32 phrase_length_min = 4 [default = 1];
  if (has_phrase_length_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->phrase_length_min(), target);
  }

  // optional uint32 phrase_length_max = 5 [default = 5];
  if (has_phrase_length_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->phrase_length_max(), target);
  }

  // optional uint32 pruning_low = 6 [default = 130000];
  if (has_pruning_low()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->pruning_low(), target);
  }

  // optional uint32 pruning_high = 7 [default = 160000];
  if (has_pruning_high()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->pruning_high(), target);
  }

  // optional double quantile_low = 8 [default = 0.5];
  if (has_quantile_low()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->quantile_low(), target);
  }

  // optional double quantile_high = 9 [default = 0.8];
  if (has_quantile_high()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->quantile_high(), target);
  }

  // optional uint32 max_regexword_matches = 10 [default = 10];
  if (has_max_regexword_matches()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->max_regexword_matches(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netspeak.generated.Request)
  return target;
}

int Request::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:netspeak.generated.Request)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string query = 1;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->query());
    }

    // optional uint32 max_phrase_count = 2 [default = 100];
    if (has_max_phrase_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_phrase_count());
    }

    // optional uint64 max_phrase_frequency = 3 [default = 0];
    if (has_max_phrase_frequency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->max_phrase_frequency());
    }

    // optional uint32 phrase_length_min = 4 [default = 1];
    if (has_phrase_length_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phrase_length_min());
    }

    // optional uint32 phrase_length_max = 5 [default = 5];
    if (has_phrase_length_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phrase_length_max());
    }

    // optional uint32 pruning_low = 6 [default = 130000];
    if (has_pruning_low()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pruning_low());
    }

    // optional uint32 pruning_high = 7 [default = 160000];
    if (has_pruning_high()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pruning_high());
    }

    // optional double quantile_low = 8 [default = 0.5];
    if (has_quantile_low()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional double quantile_high = 9 [default = 0.8];
    if (has_quantile_high()) {
      total_size += 1 + 8;
    }

    // optional uint32 max_regexword_matches = 10 [default = 10];
    if (has_max_regexword_matches()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_regexword_matches());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netspeak.generated.Request)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Request* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netspeak.generated.Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netspeak.generated.Request)
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netspeak.generated.Request)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_query()) {
      set_has_query();
      query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
    }
    if (from.has_max_phrase_count()) {
      set_max_phrase_count(from.max_phrase_count());
    }
    if (from.has_max_phrase_frequency()) {
      set_max_phrase_frequency(from.max_phrase_frequency());
    }
    if (from.has_phrase_length_min()) {
      set_phrase_length_min(from.phrase_length_min());
    }
    if (from.has_phrase_length_max()) {
      set_phrase_length_max(from.phrase_length_max());
    }
    if (from.has_pruning_low()) {
      set_pruning_low(from.pruning_low());
    }
    if (from.has_pruning_high()) {
      set_pruning_high(from.pruning_high());
    }
    if (from.has_quantile_low()) {
      set_quantile_low(from.quantile_low());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_quantile_high()) {
      set_quantile_high(from.quantile_high());
    }
    if (from.has_max_regexword_matches()) {
      set_max_regexword_matches(from.max_regexword_matches());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netspeak.generated.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netspeak.generated.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {

  return true;
}

void Request::Swap(Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request::InternalSwap(Request* other) {
  query_.Swap(&other->query_);
  std::swap(max_phrase_count_, other->max_phrase_count_);
  std::swap(max_phrase_frequency_, other->max_phrase_frequency_);
  std::swap(phrase_length_min_, other->phrase_length_min_);
  std::swap(phrase_length_max_, other->phrase_length_max_);
  std::swap(pruning_low_, other->pruning_low_);
  std::swap(pruning_high_, other->pruning_high_);
  std::swap(quantile_low_, other->quantile_low_);
  std::swap(quantile_high_, other->quantile_high_);
  std::swap(max_regexword_matches_, other->max_regexword_matches_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Request

// optional string query = 1;
bool Request::has_query() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Request::set_has_query() {
  _has_bits_[0] |= 0x00000001u;
}
void Request::clear_has_query() {
  _has_bits_[0] &= ~0x00000001u;
}
void Request::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
 const ::std::string& Request::query() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Request.query)
  return query_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:netspeak.generated.Request.query)
}
 void Request::set_query(const char* value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:netspeak.generated.Request.query)
}
 void Request::set_query(const char* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:netspeak.generated.Request.query)
}
 ::std::string* Request::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:netspeak.generated.Request.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Request::release_query() {
  // @@protoc_insertion_point(field_release:netspeak.generated.Request.query)
  clear_has_query();
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:netspeak.generated.Request.query)
}

// optional uint32 max_phrase_count = 2 [default = 100];
bool Request::has_max_phrase_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Request::set_has_max_phrase_count() {
  _has_bits_[0] |= 0x00000002u;
}
void Request::clear_has_max_phrase_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void Request::clear_max_phrase_count() {
  max_phrase_count_ = 100u;
  clear_has_max_phrase_count();
}
 ::google::protobuf::uint32 Request::max_phrase_count() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Request.max_phrase_count)
  return max_phrase_count_;
}
 void Request::set_max_phrase_count(::google::protobuf::uint32 value) {
  set_has_max_phrase_count();
  max_phrase_count_ = value;
  // @@protoc_insertion_point(field_set:netspeak.generated.Request.max_phrase_count)
}

// optional uint64 max_phrase_frequency = 3 [default = 0];
bool Request::has_max_phrase_frequency() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Request::set_has_max_phrase_frequency() {
  _has_bits_[0] |= 0x00000004u;
}
void Request::clear_has_max_phrase_frequency() {
  _has_bits_[0] &= ~0x00000004u;
}
void Request::clear_max_phrase_frequency() {
  max_phrase_frequency_ = GOOGLE_ULONGLONG(0);
  clear_has_max_phrase_frequency();
}
 ::google::protobuf::uint64 Request::max_phrase_frequency() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Request.max_phrase_frequency)
  return max_phrase_frequency_;
}
 void Request::set_max_phrase_frequency(::google::protobuf::uint64 value) {
  set_has_max_phrase_frequency();
  max_phrase_frequency_ = value;
  // @@protoc_insertion_point(field_set:netspeak.generated.Request.max_phrase_frequency)
}

// optional uint32 phrase_length_min = 4 [default = 1];
bool Request::has_phrase_length_min() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Request::set_has_phrase_length_min() {
  _has_bits_[0] |= 0x00000008u;
}
void Request::clear_has_phrase_length_min() {
  _has_bits_[0] &= ~0x00000008u;
}
void Request::clear_phrase_length_min() {
  phrase_length_min_ = 1u;
  clear_has_phrase_length_min();
}
 ::google::protobuf::uint32 Request::phrase_length_min() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Request.phrase_length_min)
  return phrase_length_min_;
}
 void Request::set_phrase_length_min(::google::protobuf::uint32 value) {
  set_has_phrase_length_min();
  phrase_length_min_ = value;
  // @@protoc_insertion_point(field_set:netspeak.generated.Request.phrase_length_min)
}

// optional uint32 phrase_length_max = 5 [default = 5];
bool Request::has_phrase_length_max() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Request::set_has_phrase_length_max() {
  _has_bits_[0] |= 0x00000010u;
}
void Request::clear_has_phrase_length_max() {
  _has_bits_[0] &= ~0x00000010u;
}
void Request::clear_phrase_length_max() {
  phrase_length_max_ = 5u;
  clear_has_phrase_length_max();
}
 ::google::protobuf::uint32 Request::phrase_length_max() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Request.phrase_length_max)
  return phrase_length_max_;
}
 void Request::set_phrase_length_max(::google::protobuf::uint32 value) {
  set_has_phrase_length_max();
  phrase_length_max_ = value;
  // @@protoc_insertion_point(field_set:netspeak.generated.Request.phrase_length_max)
}

// optional uint32 pruning_low = 6 [default = 130000];
bool Request::has_pruning_low() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Request::set_has_pruning_low() {
  _has_bits_[0] |= 0x00000020u;
}
void Request::clear_has_pruning_low() {
  _has_bits_[0] &= ~0x00000020u;
}
void Request::clear_pruning_low() {
  pruning_low_ = 130000u;
  clear_has_pruning_low();
}
 ::google::protobuf::uint32 Request::pruning_low() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Request.pruning_low)
  return pruning_low_;
}
 void Request::set_pruning_low(::google::protobuf::uint32 value) {
  set_has_pruning_low();
  pruning_low_ = value;
  // @@protoc_insertion_point(field_set:netspeak.generated.Request.pruning_low)
}

// optional uint32 pruning_high = 7 [default = 160000];
bool Request::has_pruning_high() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Request::set_has_pruning_high() {
  _has_bits_[0] |= 0x00000040u;
}
void Request::clear_has_pruning_high() {
  _has_bits_[0] &= ~0x00000040u;
}
void Request::clear_pruning_high() {
  pruning_high_ = 160000u;
  clear_has_pruning_high();
}
 ::google::protobuf::uint32 Request::pruning_high() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Request.pruning_high)
  return pruning_high_;
}
 void Request::set_pruning_high(::google::protobuf::uint32 value) {
  set_has_pruning_high();
  pruning_high_ = value;
  // @@protoc_insertion_point(field_set:netspeak.generated.Request.pruning_high)
}

// optional double quantile_low = 8 [default = 0.5];
bool Request::has_quantile_low() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Request::set_has_quantile_low() {
  _has_bits_[0] |= 0x00000080u;
}
void Request::clear_has_quantile_low() {
  _has_bits_[0] &= ~0x00000080u;
}
void Request::clear_quantile_low() {
  quantile_low_ = 0.5;
  clear_has_quantile_low();
}
 double Request::quantile_low() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Request.quantile_low)
  return quantile_low_;
}
 void Request::set_quantile_low(double value) {
  set_has_quantile_low();
  quantile_low_ = value;
  // @@protoc_insertion_point(field_set:netspeak.generated.Request.quantile_low)
}

// optional double quantile_high = 9 [default = 0.8];
bool Request::has_quantile_high() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Request::set_has_quantile_high() {
  _has_bits_[0] |= 0x00000100u;
}
void Request::clear_has_quantile_high() {
  _has_bits_[0] &= ~0x00000100u;
}
void Request::clear_quantile_high() {
  quantile_high_ = 0.8;
  clear_has_quantile_high();
}
 double Request::quantile_high() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Request.quantile_high)
  return quantile_high_;
}
 void Request::set_quantile_high(double value) {
  set_has_quantile_high();
  quantile_high_ = value;
  // @@protoc_insertion_point(field_set:netspeak.generated.Request.quantile_high)
}

// optional uint32 max_regexword_matches = 10 [default = 10];
bool Request::has_max_regexword_matches() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Request::set_has_max_regexword_matches() {
  _has_bits_[0] |= 0x00000200u;
}
void Request::clear_has_max_regexword_matches() {
  _has_bits_[0] &= ~0x00000200u;
}
void Request::clear_max_regexword_matches() {
  max_regexword_matches_ = 10u;
  clear_has_max_regexword_matches();
}
 ::google::protobuf::uint32 Request::max_regexword_matches() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Request.max_regexword_matches)
  return max_regexword_matches_;
}
 void Request::set_max_regexword_matches(::google::protobuf::uint32 value) {
  set_has_max_regexword_matches();
  max_regexword_matches_ = value;
  // @@protoc_insertion_point(field_set:netspeak.generated.Request.max_regexword_matches)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryResult_PhraseRef::kQueryIdFieldNumber;
const int QueryResult_PhraseRef::kFrequencyFieldNumber;
const int QueryResult_PhraseRef::kLengthFieldNumber;
const int QueryResult_PhraseRef::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryResult_PhraseRef::QueryResult_PhraseRef()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:netspeak.generated.QueryResult.PhraseRef)
}

void QueryResult_PhraseRef::InitAsDefaultInstance() {
}

QueryResult_PhraseRef::QueryResult_PhraseRef(const QueryResult_PhraseRef& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:netspeak.generated.QueryResult.PhraseRef)
}

void QueryResult_PhraseRef::SharedCtor() {
  _cached_size_ = 0;
  query_id_ = 0u;
  frequency_ = 0u;
  length_ = 0u;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryResult_PhraseRef::~QueryResult_PhraseRef() {
  // @@protoc_insertion_point(destructor:netspeak.generated.QueryResult.PhraseRef)
  SharedDtor();
}

void QueryResult_PhraseRef::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryResult_PhraseRef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryResult_PhraseRef::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryResult_PhraseRef_descriptor_;
}

const QueryResult_PhraseRef& QueryResult_PhraseRef::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetspeakMessages_2eproto();
  return *default_instance_;
}

QueryResult_PhraseRef* QueryResult_PhraseRef::default_instance_ = NULL;

QueryResult_PhraseRef* QueryResult_PhraseRef::New(::google::protobuf::Arena* arena) const {
  QueryResult_PhraseRef* n = new QueryResult_PhraseRef;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryResult_PhraseRef::Clear() {
// @@protoc_insertion_point(message_clear_start:netspeak.generated.QueryResult.PhraseRef)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(QueryResult_PhraseRef, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<QueryResult_PhraseRef*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(query_id_, id_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool QueryResult_PhraseRef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netspeak.generated.QueryResult.PhraseRef)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 query_id = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &query_id_)));
          set_has_query_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_frequency;
        break;
      }

      // optional uint32 frequency = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_frequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frequency_)));
          set_has_frequency();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_length;
        break;
      }

      // optional uint32 length = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_id;
        break;
      }

      // optional uint32 id = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netspeak.generated.QueryResult.PhraseRef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netspeak.generated.QueryResult.PhraseRef)
  return false;
#undef DO_
}

void QueryResult_PhraseRef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netspeak.generated.QueryResult.PhraseRef)
  // optional uint32 query_id = 1 [default = 0];
  if (has_query_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->query_id(), output);
  }

  // optional uint32 frequency = 2 [default = 0];
  if (has_frequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->frequency(), output);
  }

  // optional uint32 length = 3 [default = 0];
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->length(), output);
  }

  // optional uint32 id = 4 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:netspeak.generated.QueryResult.PhraseRef)
}

::google::protobuf::uint8* QueryResult_PhraseRef::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:netspeak.generated.QueryResult.PhraseRef)
  // optional uint32 query_id = 1 [default = 0];
  if (has_query_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->query_id(), target);
  }

  // optional uint32 frequency = 2 [default = 0];
  if (has_frequency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->frequency(), target);
  }

  // optional uint32 length = 3 [default = 0];
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->length(), target);
  }

  // optional uint32 id = 4 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netspeak.generated.QueryResult.PhraseRef)
  return target;
}

int QueryResult_PhraseRef::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:netspeak.generated.QueryResult.PhraseRef)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 query_id = 1 [default = 0];
    if (has_query_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->query_id());
    }

    // optional uint32 frequency = 2 [default = 0];
    if (has_frequency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->frequency());
    }

    // optional uint32 length = 3 [default = 0];
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->length());
    }

    // optional uint32 id = 4 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryResult_PhraseRef::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netspeak.generated.QueryResult.PhraseRef)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const QueryResult_PhraseRef* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryResult_PhraseRef>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netspeak.generated.QueryResult.PhraseRef)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netspeak.generated.QueryResult.PhraseRef)
    MergeFrom(*source);
  }
}

void QueryResult_PhraseRef::MergeFrom(const QueryResult_PhraseRef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netspeak.generated.QueryResult.PhraseRef)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_query_id()) {
      set_query_id(from.query_id());
    }
    if (from.has_frequency()) {
      set_frequency(from.frequency());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void QueryResult_PhraseRef::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netspeak.generated.QueryResult.PhraseRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryResult_PhraseRef::CopyFrom(const QueryResult_PhraseRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netspeak.generated.QueryResult.PhraseRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryResult_PhraseRef::IsInitialized() const {

  return true;
}

void QueryResult_PhraseRef::Swap(QueryResult_PhraseRef* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryResult_PhraseRef::InternalSwap(QueryResult_PhraseRef* other) {
  std::swap(query_id_, other->query_id_);
  std::swap(frequency_, other->frequency_);
  std::swap(length_, other->length_);
  std::swap(id_, other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryResult_PhraseRef::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryResult_PhraseRef_descriptor_;
  metadata.reflection = QueryResult_PhraseRef_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryResult::kQueryFieldNumber;
const int QueryResult::kRequestFieldNumber;
const int QueryResult::kReferenceFieldNumber;
const int QueryResult::kPhraseFieldNumber;
const int QueryResult::kUnionSizeFieldNumber;
const int QueryResult::kUnknownWordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryResult::QueryResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:netspeak.generated.QueryResult)
}

void QueryResult::InitAsDefaultInstance() {
  query_ = const_cast< ::netspeak::generated::Query*>(&::netspeak::generated::Query::default_instance());
  request_ = const_cast< ::netspeak::generated::Request*>(&::netspeak::generated::Request::default_instance());
  phrase_ = const_cast< ::netspeak::generated::Phrase*>(&::netspeak::generated::Phrase::default_instance());
}

QueryResult::QueryResult(const QueryResult& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:netspeak.generated.QueryResult)
}

void QueryResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  query_ = NULL;
  request_ = NULL;
  phrase_ = NULL;
  union_size_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryResult::~QueryResult() {
  // @@protoc_insertion_point(destructor:netspeak.generated.QueryResult)
  SharedDtor();
}

void QueryResult::SharedDtor() {
  if (this != default_instance_) {
    delete query_;
    delete request_;
    delete phrase_;
  }
}

void QueryResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryResult_descriptor_;
}

const QueryResult& QueryResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetspeakMessages_2eproto();
  return *default_instance_;
}

QueryResult* QueryResult::default_instance_ = NULL;

QueryResult* QueryResult::New(::google::protobuf::Arena* arena) const {
  QueryResult* n = new QueryResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryResult::Clear() {
// @@protoc_insertion_point(message_clear_start:netspeak.generated.QueryResult)
  if (_has_bits_[0 / 32] & 27u) {
    if (has_query()) {
      if (query_ != NULL) query_->::netspeak::generated::Query::Clear();
    }
    if (has_request()) {
      if (request_ != NULL) request_->::netspeak::generated::Request::Clear();
    }
    if (has_phrase()) {
      if (phrase_ != NULL) phrase_->::netspeak::generated::Phrase::Clear();
    }
    union_size_ = GOOGLE_ULONGLONG(0);
  }
  reference_.Clear();
  unknown_word_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool QueryResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netspeak.generated.QueryResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .netspeak.generated.Query query = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_query()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_request;
        break;
      }

      // optional .netspeak.generated.Request request = 2;
      case 2: {
        if (tag == 18) {
         parse_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_reference;
        break;
      }

      // repeated .netspeak.generated.QueryResult.PhraseRef reference = 3;
      case 3: {
        if (tag == 26) {
         parse_reference:
          DO_(input->IncrementRecursionDepth());
         parse_loop_reference:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_reference()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_reference;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(34)) goto parse_phrase;
        break;
      }

      // optional .netspeak.generated.Phrase phrase = 4;
      case 4: {
        if (tag == 34) {
         parse_phrase:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_phrase()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_union_size;
        break;
      }

      // optional uint64 union_size = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_union_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &union_size_)));
          set_has_union_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_unknown_word;
        break;
      }

      // repeated string unknown_word = 6;
      case 6: {
        if (tag == 50) {
         parse_unknown_word:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_unknown_word()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->unknown_word(this->unknown_word_size() - 1).data(),
            this->unknown_word(this->unknown_word_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "netspeak.generated.QueryResult.unknown_word");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_unknown_word;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netspeak.generated.QueryResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netspeak.generated.QueryResult)
  return false;
#undef DO_
}

void QueryResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netspeak.generated.QueryResult)
  // optional .netspeak.generated.Query query = 1;
  if (has_query()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->query_, output);
  }

  // optional .netspeak.generated.Request request = 2;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->request_, output);
  }

  // repeated .netspeak.generated.QueryResult.PhraseRef reference = 3;
  for (unsigned int i = 0, n = this->reference_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->reference(i), output);
  }

  // optional .netspeak.generated.Phrase phrase = 4;
  if (has_phrase()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->phrase_, output);
  }

  // optional uint64 union_size = 5 [default = 0];
  if (has_union_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->union_size(), output);
  }

  // repeated string unknown_word = 6;
  for (int i = 0; i < this->unknown_word_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unknown_word(i).data(), this->unknown_word(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "netspeak.generated.QueryResult.unknown_word");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->unknown_word(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:netspeak.generated.QueryResult)
}

::google::protobuf::uint8* QueryResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:netspeak.generated.QueryResult)
  // optional .netspeak.generated.Query query = 1;
  if (has_query()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->query_, false, target);
  }

  // optional .netspeak.generated.Request request = 2;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->request_, false, target);
  }

  // repeated .netspeak.generated.QueryResult.PhraseRef reference = 3;
  for (unsigned int i = 0, n = this->reference_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->reference(i), false, target);
  }

  // optional .netspeak.generated.Phrase phrase = 4;
  if (has_phrase()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->phrase_, false, target);
  }

  // optional uint64 union_size = 5 [default = 0];
  if (has_union_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->union_size(), target);
  }

  // repeated string unknown_word = 6;
  for (int i = 0; i < this->unknown_word_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unknown_word(i).data(), this->unknown_word(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "netspeak.generated.QueryResult.unknown_word");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->unknown_word(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netspeak.generated.QueryResult)
  return target;
}

int QueryResult::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:netspeak.generated.QueryResult)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 27u) {
    // optional .netspeak.generated.Query query = 1;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->query_);
    }

    // optional .netspeak.generated.Request request = 2;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->request_);
    }

    // optional .netspeak.generated.Phrase phrase = 4;
    if (has_phrase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->phrase_);
    }

    // optional uint64 union_size = 5 [default = 0];
    if (has_union_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->union_size());
    }

  }
  // repeated .netspeak.generated.QueryResult.PhraseRef reference = 3;
  total_size += 1 * this->reference_size();
  for (int i = 0; i < this->reference_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reference(i));
  }

  // repeated string unknown_word = 6;
  total_size += 1 * this->unknown_word_size();
  for (int i = 0; i < this->unknown_word_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->unknown_word(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netspeak.generated.QueryResult)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const QueryResult* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netspeak.generated.QueryResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netspeak.generated.QueryResult)
    MergeFrom(*source);
  }
}

void QueryResult::MergeFrom(const QueryResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netspeak.generated.QueryResult)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  reference_.MergeFrom(from.reference_);
  unknown_word_.MergeFrom(from.unknown_word_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_query()) {
      mutable_query()->::netspeak::generated::Query::MergeFrom(from.query());
    }
    if (from.has_request()) {
      mutable_request()->::netspeak::generated::Request::MergeFrom(from.request());
    }
    if (from.has_phrase()) {
      mutable_phrase()->::netspeak::generated::Phrase::MergeFrom(from.phrase());
    }
    if (from.has_union_size()) {
      set_union_size(from.union_size());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void QueryResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netspeak.generated.QueryResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryResult::CopyFrom(const QueryResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netspeak.generated.QueryResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryResult::IsInitialized() const {

  return true;
}

void QueryResult::Swap(QueryResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryResult::InternalSwap(QueryResult* other) {
  std::swap(query_, other->query_);
  std::swap(request_, other->request_);
  reference_.UnsafeArenaSwap(&other->reference_);
  std::swap(phrase_, other->phrase_);
  std::swap(union_size_, other->union_size_);
  unknown_word_.UnsafeArenaSwap(&other->unknown_word_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryResult_descriptor_;
  metadata.reflection = QueryResult_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryResult_PhraseRef

// optional uint32 query_id = 1 [default = 0];
bool QueryResult_PhraseRef::has_query_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QueryResult_PhraseRef::set_has_query_id() {
  _has_bits_[0] |= 0x00000001u;
}
void QueryResult_PhraseRef::clear_has_query_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void QueryResult_PhraseRef::clear_query_id() {
  query_id_ = 0u;
  clear_has_query_id();
}
 ::google::protobuf::uint32 QueryResult_PhraseRef::query_id() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.QueryResult.PhraseRef.query_id)
  return query_id_;
}
 void QueryResult_PhraseRef::set_query_id(::google::protobuf::uint32 value) {
  set_has_query_id();
  query_id_ = value;
  // @@protoc_insertion_point(field_set:netspeak.generated.QueryResult.PhraseRef.query_id)
}

// optional uint32 frequency = 2 [default = 0];
bool QueryResult_PhraseRef::has_frequency() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QueryResult_PhraseRef::set_has_frequency() {
  _has_bits_[0] |= 0x00000002u;
}
void QueryResult_PhraseRef::clear_has_frequency() {
  _has_bits_[0] &= ~0x00000002u;
}
void QueryResult_PhraseRef::clear_frequency() {
  frequency_ = 0u;
  clear_has_frequency();
}
 ::google::protobuf::uint32 QueryResult_PhraseRef::frequency() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.QueryResult.PhraseRef.frequency)
  return frequency_;
}
 void QueryResult_PhraseRef::set_frequency(::google::protobuf::uint32 value) {
  set_has_frequency();
  frequency_ = value;
  // @@protoc_insertion_point(field_set:netspeak.generated.QueryResult.PhraseRef.frequency)
}

// optional uint32 length = 3 [default = 0];
bool QueryResult_PhraseRef::has_length() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void QueryResult_PhraseRef::set_has_length() {
  _has_bits_[0] |= 0x00000004u;
}
void QueryResult_PhraseRef::clear_has_length() {
  _has_bits_[0] &= ~0x00000004u;
}
void QueryResult_PhraseRef::clear_length() {
  length_ = 0u;
  clear_has_length();
}
 ::google::protobuf::uint32 QueryResult_PhraseRef::length() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.QueryResult.PhraseRef.length)
  return length_;
}
 void QueryResult_PhraseRef::set_length(::google::protobuf::uint32 value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:netspeak.generated.QueryResult.PhraseRef.length)
}

// optional uint32 id = 4 [default = 0];
bool QueryResult_PhraseRef::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void QueryResult_PhraseRef::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
void QueryResult_PhraseRef::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void QueryResult_PhraseRef::clear_id() {
  id_ = 0u;
  clear_has_id();
}
 ::google::protobuf::uint32 QueryResult_PhraseRef::id() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.QueryResult.PhraseRef.id)
  return id_;
}
 void QueryResult_PhraseRef::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:netspeak.generated.QueryResult.PhraseRef.id)
}

// -------------------------------------------------------------------

// QueryResult

// optional .netspeak.generated.Query query = 1;
bool QueryResult::has_query() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QueryResult::set_has_query() {
  _has_bits_[0] |= 0x00000001u;
}
void QueryResult::clear_has_query() {
  _has_bits_[0] &= ~0x00000001u;
}
void QueryResult::clear_query() {
  if (query_ != NULL) query_->::netspeak::generated::Query::Clear();
  clear_has_query();
}
const ::netspeak::generated::Query& QueryResult::query() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.QueryResult.query)
  return query_ != NULL ? *query_ : *default_instance_->query_;
}
::netspeak::generated::Query* QueryResult::mutable_query() {
  set_has_query();
  if (query_ == NULL) {
    query_ = new ::netspeak::generated::Query;
  }
  // @@protoc_insertion_point(field_mutable:netspeak.generated.QueryResult.query)
  return query_;
}
::netspeak::generated::Query* QueryResult::release_query() {
  // @@protoc_insertion_point(field_release:netspeak.generated.QueryResult.query)
  clear_has_query();
  ::netspeak::generated::Query* temp = query_;
  query_ = NULL;
  return temp;
}
void QueryResult::set_allocated_query(::netspeak::generated::Query* query) {
  delete query_;
  query_ = query;
  if (query) {
    set_has_query();
  } else {
    clear_has_query();
  }
  // @@protoc_insertion_point(field_set_allocated:netspeak.generated.QueryResult.query)
}

// optional .netspeak.generated.Request request = 2;
bool QueryResult::has_request() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QueryResult::set_has_request() {
  _has_bits_[0] |= 0x00000002u;
}
void QueryResult::clear_has_request() {
  _has_bits_[0] &= ~0x00000002u;
}
void QueryResult::clear_request() {
  if (request_ != NULL) request_->::netspeak::generated::Request::Clear();
  clear_has_request();
}
const ::netspeak::generated::Request& QueryResult::request() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.QueryResult.request)
  return request_ != NULL ? *request_ : *default_instance_->request_;
}
::netspeak::generated::Request* QueryResult::mutable_request() {
  set_has_request();
  if (request_ == NULL) {
    request_ = new ::netspeak::generated::Request;
  }
  // @@protoc_insertion_point(field_mutable:netspeak.generated.QueryResult.request)
  return request_;
}
::netspeak::generated::Request* QueryResult::release_request() {
  // @@protoc_insertion_point(field_release:netspeak.generated.QueryResult.request)
  clear_has_request();
  ::netspeak::generated::Request* temp = request_;
  request_ = NULL;
  return temp;
}
void QueryResult::set_allocated_request(::netspeak::generated::Request* request) {
  delete request_;
  request_ = request;
  if (request) {
    set_has_request();
  } else {
    clear_has_request();
  }
  // @@protoc_insertion_point(field_set_allocated:netspeak.generated.QueryResult.request)
}

// repeated .netspeak.generated.QueryResult.PhraseRef reference = 3;
int QueryResult::reference_size() const {
  return reference_.size();
}
void QueryResult::clear_reference() {
  reference_.Clear();
}
const ::netspeak::generated::QueryResult_PhraseRef& QueryResult::reference(int index) const {
  // @@protoc_insertion_point(field_get:netspeak.generated.QueryResult.reference)
  return reference_.Get(index);
}
::netspeak::generated::QueryResult_PhraseRef* QueryResult::mutable_reference(int index) {
  // @@protoc_insertion_point(field_mutable:netspeak.generated.QueryResult.reference)
  return reference_.Mutable(index);
}
::netspeak::generated::QueryResult_PhraseRef* QueryResult::add_reference() {
  // @@protoc_insertion_point(field_add:netspeak.generated.QueryResult.reference)
  return reference_.Add();
}
::google::protobuf::RepeatedPtrField< ::netspeak::generated::QueryResult_PhraseRef >*
QueryResult::mutable_reference() {
  // @@protoc_insertion_point(field_mutable_list:netspeak.generated.QueryResult.reference)
  return &reference_;
}
const ::google::protobuf::RepeatedPtrField< ::netspeak::generated::QueryResult_PhraseRef >&
QueryResult::reference() const {
  // @@protoc_insertion_point(field_list:netspeak.generated.QueryResult.reference)
  return reference_;
}

// optional .netspeak.generated.Phrase phrase = 4;
bool QueryResult::has_phrase() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void QueryResult::set_has_phrase() {
  _has_bits_[0] |= 0x00000008u;
}
void QueryResult::clear_has_phrase() {
  _has_bits_[0] &= ~0x00000008u;
}
void QueryResult::clear_phrase() {
  if (phrase_ != NULL) phrase_->::netspeak::generated::Phrase::Clear();
  clear_has_phrase();
}
const ::netspeak::generated::Phrase& QueryResult::phrase() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.QueryResult.phrase)
  return phrase_ != NULL ? *phrase_ : *default_instance_->phrase_;
}
::netspeak::generated::Phrase* QueryResult::mutable_phrase() {
  set_has_phrase();
  if (phrase_ == NULL) {
    phrase_ = new ::netspeak::generated::Phrase;
  }
  // @@protoc_insertion_point(field_mutable:netspeak.generated.QueryResult.phrase)
  return phrase_;
}
::netspeak::generated::Phrase* QueryResult::release_phrase() {
  // @@protoc_insertion_point(field_release:netspeak.generated.QueryResult.phrase)
  clear_has_phrase();
  ::netspeak::generated::Phrase* temp = phrase_;
  phrase_ = NULL;
  return temp;
}
void QueryResult::set_allocated_phrase(::netspeak::generated::Phrase* phrase) {
  delete phrase_;
  phrase_ = phrase;
  if (phrase) {
    set_has_phrase();
  } else {
    clear_has_phrase();
  }
  // @@protoc_insertion_point(field_set_allocated:netspeak.generated.QueryResult.phrase)
}

// optional uint64 union_size = 5 [default = 0];
bool QueryResult::has_union_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void QueryResult::set_has_union_size() {
  _has_bits_[0] |= 0x00000010u;
}
void QueryResult::clear_has_union_size() {
  _has_bits_[0] &= ~0x00000010u;
}
void QueryResult::clear_union_size() {
  union_size_ = GOOGLE_ULONGLONG(0);
  clear_has_union_size();
}
 ::google::protobuf::uint64 QueryResult::union_size() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.QueryResult.union_size)
  return union_size_;
}
 void QueryResult::set_union_size(::google::protobuf::uint64 value) {
  set_has_union_size();
  union_size_ = value;
  // @@protoc_insertion_point(field_set:netspeak.generated.QueryResult.union_size)
}

// repeated string unknown_word = 6;
int QueryResult::unknown_word_size() const {
  return unknown_word_.size();
}
void QueryResult::clear_unknown_word() {
  unknown_word_.Clear();
}
 const ::std::string& QueryResult::unknown_word(int index) const {
  // @@protoc_insertion_point(field_get:netspeak.generated.QueryResult.unknown_word)
  return unknown_word_.Get(index);
}
 ::std::string* QueryResult::mutable_unknown_word(int index) {
  // @@protoc_insertion_point(field_mutable:netspeak.generated.QueryResult.unknown_word)
  return unknown_word_.Mutable(index);
}
 void QueryResult::set_unknown_word(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:netspeak.generated.QueryResult.unknown_word)
  unknown_word_.Mutable(index)->assign(value);
}
 void QueryResult::set_unknown_word(int index, const char* value) {
  unknown_word_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:netspeak.generated.QueryResult.unknown_word)
}
 void QueryResult::set_unknown_word(int index, const char* value, size_t size) {
  unknown_word_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:netspeak.generated.QueryResult.unknown_word)
}
 ::std::string* QueryResult::add_unknown_word() {
  // @@protoc_insertion_point(field_add_mutable:netspeak.generated.QueryResult.unknown_word)
  return unknown_word_.Add();
}
 void QueryResult::add_unknown_word(const ::std::string& value) {
  unknown_word_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:netspeak.generated.QueryResult.unknown_word)
}
 void QueryResult::add_unknown_word(const char* value) {
  unknown_word_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:netspeak.generated.QueryResult.unknown_word)
}
 void QueryResult::add_unknown_word(const char* value, size_t size) {
  unknown_word_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:netspeak.generated.QueryResult.unknown_word)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
QueryResult::unknown_word() const {
  // @@protoc_insertion_point(field_list:netspeak.generated.QueryResult.unknown_word)
  return unknown_word_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
QueryResult::mutable_unknown_word() {
  // @@protoc_insertion_point(field_mutable_list:netspeak.generated.QueryResult.unknown_word)
  return &unknown_word_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RawResponse::kRequestFieldNumber;
const int RawResponse::kQueryTokenFieldNumber;
const int RawResponse::kQueryFieldNumber;
const int RawResponse::kQueryResultFieldNumber;
const int RawResponse::kErrorCodeFieldNumber;
const int RawResponse::kErrorMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RawResponse::RawResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:netspeak.generated.RawResponse)
}

void RawResponse::InitAsDefaultInstance() {
  request_ = const_cast< ::netspeak::generated::Request*>(&::netspeak::generated::Request::default_instance());
  query_ = const_cast< ::netspeak::generated::Query*>(&::netspeak::generated::Query::default_instance());
}

RawResponse::RawResponse(const RawResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:netspeak.generated.RawResponse)
}

void RawResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  request_ = NULL;
  query_ = NULL;
  error_code_ = 0u;
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RawResponse::~RawResponse() {
  // @@protoc_insertion_point(destructor:netspeak.generated.RawResponse)
  SharedDtor();
}

void RawResponse::SharedDtor() {
  error_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete request_;
    delete query_;
  }
}

void RawResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RawResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RawResponse_descriptor_;
}

const RawResponse& RawResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetspeakMessages_2eproto();
  return *default_instance_;
}

RawResponse* RawResponse::default_instance_ = NULL;

RawResponse* RawResponse::New(::google::protobuf::Arena* arena) const {
  RawResponse* n = new RawResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RawResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:netspeak.generated.RawResponse)
  if (_has_bits_[0 / 32] & 53u) {
    if (has_request()) {
      if (request_ != NULL) request_->::netspeak::generated::Request::Clear();
    }
    if (has_query()) {
      if (query_ != NULL) query_->::netspeak::generated::Query::Clear();
    }
    error_code_ = 0u;
    if (has_error_message()) {
      error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  query_token_.Clear();
  query_result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RawResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netspeak.generated.RawResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .netspeak.generated.Request request = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_query_token;
        break;
      }

      // repeated string query_token = 2;
      case 2: {
        if (tag == 18) {
         parse_query_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_query_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->query_token(this->query_token_size() - 1).data(),
            this->query_token(this->query_token_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "netspeak.generated.RawResponse.query_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_query_token;
        if (input->ExpectTag(26)) goto parse_query;
        break;
      }

      // optional .netspeak.generated.Query query = 3;
      case 3: {
        if (tag == 26) {
         parse_query:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_query()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_query_result;
        break;
      }

      // repeated .netspeak.generated.QueryResult query_result = 4;
      case 4: {
        if (tag == 34) {
         parse_query_result:
          DO_(input->IncrementRecursionDepth());
         parse_loop_query_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_query_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_query_result;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(40)) goto parse_error_code;
        break;
      }

      // optional uint32 error_code = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_error_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_error_message;
        break;
      }

      // optional string error_message = 6;
      case 6: {
        if (tag == 50) {
         parse_error_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_message().data(), this->error_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "netspeak.generated.RawResponse.error_message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netspeak.generated.RawResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netspeak.generated.RawResponse)
  return false;
#undef DO_
}

void RawResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netspeak.generated.RawResponse)
  // optional .netspeak.generated.Request request = 1;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->request_, output);
  }

  // repeated string query_token = 2;
  for (int i = 0; i < this->query_token_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query_token(i).data(), this->query_token(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "netspeak.generated.RawResponse.query_token");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->query_token(i), output);
  }

  // optional .netspeak.generated.Query query = 3;
  if (has_query()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->query_, output);
  }

  // repeated .netspeak.generated.QueryResult query_result = 4;
  for (unsigned int i = 0, n = this->query_result_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->query_result(i), output);
  }

  // optional uint32 error_code = 5 [default = 0];
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->error_code(), output);
  }

  // optional string error_message = 6;
  if (has_error_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "netspeak.generated.RawResponse.error_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->error_message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:netspeak.generated.RawResponse)
}

::google::protobuf::uint8* RawResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:netspeak.generated.RawResponse)
  // optional .netspeak.generated.Request request = 1;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->request_, false, target);
  }

  // repeated string query_token = 2;
  for (int i = 0; i < this->query_token_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query_token(i).data(), this->query_token(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "netspeak.generated.RawResponse.query_token");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->query_token(i), target);
  }

  // optional .netspeak.generated.Query query = 3;
  if (has_query()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->query_, false, target);
  }

  // repeated .netspeak.generated.QueryResult query_result = 4;
  for (unsigned int i = 0, n = this->query_result_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->query_result(i), false, target);
  }

  // optional uint32 error_code = 5 [default = 0];
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->error_code(), target);
  }

  // optional string error_message = 6;
  if (has_error_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "netspeak.generated.RawResponse.error_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->error_message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netspeak.generated.RawResponse)
  return target;
}

int RawResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:netspeak.generated.RawResponse)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 53u) {
    // optional .netspeak.generated.Request request = 1;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->request_);
    }

    // optional .netspeak.generated.Query query = 3;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->query_);
    }

    // optional uint32 error_code = 5 [default = 0];
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

    // optional string error_message = 6;
    if (has_error_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_message());
    }

  }
  // repeated string query_token = 2;
  total_size += 1 * this->query_token_size();
  for (int i = 0; i < this->query_token_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->query_token(i));
  }

  // repeated .netspeak.generated.QueryResult query_result = 4;
  total_size += 1 * this->query_result_size();
  for (int i = 0; i < this->query_result_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->query_result(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RawResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netspeak.generated.RawResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RawResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RawResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netspeak.generated.RawResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netspeak.generated.RawResponse)
    MergeFrom(*source);
  }
}

void RawResponse::MergeFrom(const RawResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netspeak.generated.RawResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  query_token_.MergeFrom(from.query_token_);
  query_result_.MergeFrom(from.query_result_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request()) {
      mutable_request()->::netspeak::generated::Request::MergeFrom(from.request());
    }
    if (from.has_query()) {
      mutable_query()->::netspeak::generated::Query::MergeFrom(from.query());
    }
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_error_message()) {
      set_has_error_message();
      error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RawResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netspeak.generated.RawResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawResponse::CopyFrom(const RawResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netspeak.generated.RawResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawResponse::IsInitialized() const {

  return true;
}

void RawResponse::Swap(RawResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RawResponse::InternalSwap(RawResponse* other) {
  std::swap(request_, other->request_);
  query_token_.UnsafeArenaSwap(&other->query_token_);
  std::swap(query_, other->query_);
  query_result_.UnsafeArenaSwap(&other->query_result_);
  std::swap(error_code_, other->error_code_);
  error_message_.Swap(&other->error_message_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RawResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RawResponse_descriptor_;
  metadata.reflection = RawResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RawResponse

// optional .netspeak.generated.Request request = 1;
bool RawResponse::has_request() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RawResponse::set_has_request() {
  _has_bits_[0] |= 0x00000001u;
}
void RawResponse::clear_has_request() {
  _has_bits_[0] &= ~0x00000001u;
}
void RawResponse::clear_request() {
  if (request_ != NULL) request_->::netspeak::generated::Request::Clear();
  clear_has_request();
}
const ::netspeak::generated::Request& RawResponse::request() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.RawResponse.request)
  return request_ != NULL ? *request_ : *default_instance_->request_;
}
::netspeak::generated::Request* RawResponse::mutable_request() {
  set_has_request();
  if (request_ == NULL) {
    request_ = new ::netspeak::generated::Request;
  }
  // @@protoc_insertion_point(field_mutable:netspeak.generated.RawResponse.request)
  return request_;
}
::netspeak::generated::Request* RawResponse::release_request() {
  // @@protoc_insertion_point(field_release:netspeak.generated.RawResponse.request)
  clear_has_request();
  ::netspeak::generated::Request* temp = request_;
  request_ = NULL;
  return temp;
}
void RawResponse::set_allocated_request(::netspeak::generated::Request* request) {
  delete request_;
  request_ = request;
  if (request) {
    set_has_request();
  } else {
    clear_has_request();
  }
  // @@protoc_insertion_point(field_set_allocated:netspeak.generated.RawResponse.request)
}

// repeated string query_token = 2;
int RawResponse::query_token_size() const {
  return query_token_.size();
}
void RawResponse::clear_query_token() {
  query_token_.Clear();
}
 const ::std::string& RawResponse::query_token(int index) const {
  // @@protoc_insertion_point(field_get:netspeak.generated.RawResponse.query_token)
  return query_token_.Get(index);
}
 ::std::string* RawResponse::mutable_query_token(int index) {
  // @@protoc_insertion_point(field_mutable:netspeak.generated.RawResponse.query_token)
  return query_token_.Mutable(index);
}
 void RawResponse::set_query_token(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:netspeak.generated.RawResponse.query_token)
  query_token_.Mutable(index)->assign(value);
}
 void RawResponse::set_query_token(int index, const char* value) {
  query_token_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:netspeak.generated.RawResponse.query_token)
}
 void RawResponse::set_query_token(int index, const char* value, size_t size) {
  query_token_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:netspeak.generated.RawResponse.query_token)
}
 ::std::string* RawResponse::add_query_token() {
  // @@protoc_insertion_point(field_add_mutable:netspeak.generated.RawResponse.query_token)
  return query_token_.Add();
}
 void RawResponse::add_query_token(const ::std::string& value) {
  query_token_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:netspeak.generated.RawResponse.query_token)
}
 void RawResponse::add_query_token(const char* value) {
  query_token_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:netspeak.generated.RawResponse.query_token)
}
 void RawResponse::add_query_token(const char* value, size_t size) {
  query_token_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:netspeak.generated.RawResponse.query_token)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
RawResponse::query_token() const {
  // @@protoc_insertion_point(field_list:netspeak.generated.RawResponse.query_token)
  return query_token_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
RawResponse::mutable_query_token() {
  // @@protoc_insertion_point(field_mutable_list:netspeak.generated.RawResponse.query_token)
  return &query_token_;
}

// optional .netspeak.generated.Query query = 3;
bool RawResponse::has_query() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RawResponse::set_has_query() {
  _has_bits_[0] |= 0x00000004u;
}
void RawResponse::clear_has_query() {
  _has_bits_[0] &= ~0x00000004u;
}
void RawResponse::clear_query() {
  if (query_ != NULL) query_->::netspeak::generated::Query::Clear();
  clear_has_query();
}
const ::netspeak::generated::Query& RawResponse::query() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.RawResponse.query)
  return query_ != NULL ? *query_ : *default_instance_->query_;
}
::netspeak::generated::Query* RawResponse::mutable_query() {
  set_has_query();
  if (query_ == NULL) {
    query_ = new ::netspeak::generated::Query;
  }
  // @@protoc_insertion_point(field_mutable:netspeak.generated.RawResponse.query)
  return query_;
}
::netspeak::generated::Query* RawResponse::release_query() {
  // @@protoc_insertion_point(field_release:netspeak.generated.RawResponse.query)
  clear_has_query();
  ::netspeak::generated::Query* temp = query_;
  query_ = NULL;
  return temp;
}
void RawResponse::set_allocated_query(::netspeak::generated::Query* query) {
  delete query_;
  query_ = query;
  if (query) {
    set_has_query();
  } else {
    clear_has_query();
  }
  // @@protoc_insertion_point(field_set_allocated:netspeak.generated.RawResponse.query)
}

// repeated .netspeak.generated.QueryResult query_result = 4;
int RawResponse::query_result_size() const {
  return query_result_.size();
}
void RawResponse::clear_query_result() {
  query_result_.Clear();
}
const ::netspeak::generated::QueryResult& RawResponse::query_result(int index) const {
  // @@protoc_insertion_point(field_get:netspeak.generated.RawResponse.query_result)
  return query_result_.Get(index);
}
::netspeak::generated::QueryResult* RawResponse::mutable_query_result(int index) {
  // @@protoc_insertion_point(field_mutable:netspeak.generated.RawResponse.query_result)
  return query_result_.Mutable(index);
}
::netspeak::generated::QueryResult* RawResponse::add_query_result() {
  // @@protoc_insertion_point(field_add:netspeak.generated.RawResponse.query_result)
  return query_result_.Add();
}
::google::protobuf::RepeatedPtrField< ::netspeak::generated::QueryResult >*
RawResponse::mutable_query_result() {
  // @@protoc_insertion_point(field_mutable_list:netspeak.generated.RawResponse.query_result)
  return &query_result_;
}
const ::google::protobuf::RepeatedPtrField< ::netspeak::generated::QueryResult >&
RawResponse::query_result() const {
  // @@protoc_insertion_point(field_list:netspeak.generated.RawResponse.query_result)
  return query_result_;
}

// optional uint32 error_code = 5 [default = 0];
bool RawResponse::has_error_code() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RawResponse::set_has_error_code() {
  _has_bits_[0] |= 0x00000010u;
}
void RawResponse::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000010u;
}
void RawResponse::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
 ::google::protobuf::uint32 RawResponse::error_code() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.RawResponse.error_code)
  return error_code_;
}
 void RawResponse::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:netspeak.generated.RawResponse.error_code)
}

// optional string error_message = 6;
bool RawResponse::has_error_message() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RawResponse::set_has_error_message() {
  _has_bits_[0] |= 0x00000020u;
}
void RawResponse::clear_has_error_message() {
  _has_bits_[0] &= ~0x00000020u;
}
void RawResponse::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_message();
}
 const ::std::string& RawResponse::error_message() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.RawResponse.error_message)
  return error_message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RawResponse::set_error_message(const ::std::string& value) {
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:netspeak.generated.RawResponse.error_message)
}
 void RawResponse::set_error_message(const char* value) {
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:netspeak.generated.RawResponse.error_message)
}
 void RawResponse::set_error_message(const char* value, size_t size) {
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:netspeak.generated.RawResponse.error_message)
}
 ::std::string* RawResponse::mutable_error_message() {
  set_has_error_message();
  // @@protoc_insertion_point(field_mutable:netspeak.generated.RawResponse.error_message)
  return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RawResponse::release_error_message() {
  // @@protoc_insertion_point(field_release:netspeak.generated.RawResponse.error_message)
  clear_has_error_message();
  return error_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RawResponse::set_allocated_error_message(::std::string* error_message) {
  if (error_message != NULL) {
    set_has_error_message();
  } else {
    clear_has_error_message();
  }
  error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:netspeak.generated.RawResponse.error_message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response::kRequestFieldNumber;
const int Response::kQueryTokenFieldNumber;
const int Response::kQueryFieldNumber;
const int Response::kPhraseFieldNumber;
const int Response::kUnknownWordFieldNumber;
const int Response::kTotalUnionSizeFieldNumber;
const int Response::kTotalFrequencyFieldNumber;
const int Response::kResumeFrequencyFieldNumber;
const int Response::kErrorCodeFieldNumber;
const int Response::kErrorMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response::Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:netspeak.generated.Response)
}

void Response::InitAsDefaultInstance() {
  request_ = const_cast< ::netspeak::generated::Request*>(&::netspeak::generated::Request::default_instance());
  query_ = const_cast< ::netspeak::generated::Query*>(&::netspeak::generated::Query::default_instance());
}

Response::Response(const Response& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:netspeak.generated.Response)
}

void Response::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  request_ = NULL;
  query_ = NULL;
  total_union_size_ = GOOGLE_ULONGLONG(0);
  total_frequency_ = GOOGLE_ULONGLONG(0);
  resume_frequency_ = GOOGLE_ULONGLONG(0);
  error_code_ = 0u;
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:netspeak.generated.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  error_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete request_;
    delete query_;
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetspeakMessages_2eproto();
  return *default_instance_;
}

Response* Response::default_instance_ = NULL;

Response* Response::New(::google::protobuf::Arena* arena) const {
  Response* n = new Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:netspeak.generated.Response)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Response, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Response*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 229u) {
    ZR_(total_union_size_, resume_frequency_);
    if (has_request()) {
      if (request_ != NULL) request_->::netspeak::generated::Request::Clear();
    }
    if (has_query()) {
      if (query_ != NULL) query_->::netspeak::generated::Query::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 768u) {
    error_code_ = 0u;
    if (has_error_message()) {
      error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  query_token_.Clear();
  phrase_.Clear();
  unknown_word_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netspeak.generated.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .netspeak.generated.Request request = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_query_token;
        break;
      }

      // repeated string query_token = 2;
      case 2: {
        if (tag == 18) {
         parse_query_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_query_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->query_token(this->query_token_size() - 1).data(),
            this->query_token(this->query_token_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "netspeak.generated.Response.query_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_query_token;
        if (input->ExpectTag(26)) goto parse_query;
        break;
      }

      // optional .netspeak.generated.Query query = 3;
      case 3: {
        if (tag == 26) {
         parse_query:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_query()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_phrase;
        break;
      }

      // repeated .netspeak.generated.Phrase phrase = 4;
      case 4: {
        if (tag == 34) {
         parse_phrase:
          DO_(input->IncrementRecursionDepth());
         parse_loop_phrase:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_phrase()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_phrase;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(42)) goto parse_unknown_word;
        break;
      }

      // repeated string unknown_word = 5;
      case 5: {
        if (tag == 42) {
         parse_unknown_word:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_unknown_word()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->unknown_word(this->unknown_word_size() - 1).data(),
            this->unknown_word(this->unknown_word_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "netspeak.generated.Response.unknown_word");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_unknown_word;
        if (input->ExpectTag(48)) goto parse_total_union_size;
        break;
      }

      // optional uint64 total_union_size = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_total_union_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_union_size_)));
          set_has_total_union_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_total_frequency;
        break;
      }

      // optional uint64 total_frequency = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_total_frequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_frequency_)));
          set_has_total_frequency();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_resume_frequency;
        break;
      }

      // optional uint64 resume_frequency = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_resume_frequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &resume_frequency_)));
          set_has_resume_frequency();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_error_code;
        break;
      }

      // optional uint32 error_code = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_error_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_error_message;
        break;
      }

      // optional string error_message = 10 [default = ""];
      case 10: {
        if (tag == 82) {
         parse_error_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_message().data(), this->error_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "netspeak.generated.Response.error_message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netspeak.generated.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netspeak.generated.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netspeak.generated.Response)
  // optional .netspeak.generated.Request request = 1;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->request_, output);
  }

  // repeated string query_token = 2;
  for (int i = 0; i < this->query_token_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query_token(i).data(), this->query_token(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "netspeak.generated.Response.query_token");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->query_token(i), output);
  }

  // optional .netspeak.generated.Query query = 3;
  if (has_query()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->query_, output);
  }

  // repeated .netspeak.generated.Phrase phrase = 4;
  for (unsigned int i = 0, n = this->phrase_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->phrase(i), output);
  }

  // repeated string unknown_word = 5;
  for (int i = 0; i < this->unknown_word_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unknown_word(i).data(), this->unknown_word(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "netspeak.generated.Response.unknown_word");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->unknown_word(i), output);
  }

  // optional uint64 total_union_size = 6 [default = 0];
  if (has_total_union_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->total_union_size(), output);
  }

  // optional uint64 total_frequency = 7 [default = 0];
  if (has_total_frequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->total_frequency(), output);
  }

  // optional uint64 resume_frequency = 8 [default = 0];
  if (has_resume_frequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->resume_frequency(), output);
  }

  // optional uint32 error_code = 9 [default = 0];
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->error_code(), output);
  }

  // optional string error_message = 10 [default = ""];
  if (has_error_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "netspeak.generated.Response.error_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->error_message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:netspeak.generated.Response)
}

::google::protobuf::uint8* Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:netspeak.generated.Response)
  // optional .netspeak.generated.Request request = 1;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->request_, false, target);
  }

  // repeated string query_token = 2;
  for (int i = 0; i < this->query_token_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query_token(i).data(), this->query_token(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "netspeak.generated.Response.query_token");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->query_token(i), target);
  }

  // optional .netspeak.generated.Query query = 3;
  if (has_query()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->query_, false, target);
  }

  // repeated .netspeak.generated.Phrase phrase = 4;
  for (unsigned int i = 0, n = this->phrase_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->phrase(i), false, target);
  }

  // repeated string unknown_word = 5;
  for (int i = 0; i < this->unknown_word_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unknown_word(i).data(), this->unknown_word(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "netspeak.generated.Response.unknown_word");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->unknown_word(i), target);
  }

  // optional uint64 total_union_size = 6 [default = 0];
  if (has_total_union_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->total_union_size(), target);
  }

  // optional uint64 total_frequency = 7 [default = 0];
  if (has_total_frequency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->total_frequency(), target);
  }

  // optional uint64 resume_frequency = 8 [default = 0];
  if (has_resume_frequency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->resume_frequency(), target);
  }

  // optional uint32 error_code = 9 [default = 0];
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->error_code(), target);
  }

  // optional string error_message = 10 [default = ""];
  if (has_error_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "netspeak.generated.Response.error_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->error_message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netspeak.generated.Response)
  return target;
}

int Response::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:netspeak.generated.Response)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 229u) {
    // optional .netspeak.generated.Request request = 1;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->request_);
    }

    // optional .netspeak.generated.Query query = 3;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->query_);
    }

    // optional uint64 total_union_size = 6 [default = 0];
    if (has_total_union_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->total_union_size());
    }

    // optional uint64 total_frequency = 7 [default = 0];
    if (has_total_frequency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->total_frequency());
    }

    // optional uint64 resume_frequency = 8 [default = 0];
    if (has_resume_frequency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->resume_frequency());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional uint32 error_code = 9 [default = 0];
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

    // optional string error_message = 10 [default = ""];
    if (has_error_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_message());
    }

  }
  // repeated string query_token = 2;
  total_size += 1 * this->query_token_size();
  for (int i = 0; i < this->query_token_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->query_token(i));
  }

  // repeated .netspeak.generated.Phrase phrase = 4;
  total_size += 1 * this->phrase_size();
  for (int i = 0; i < this->phrase_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->phrase(i));
  }

  // repeated string unknown_word = 5;
  total_size += 1 * this->unknown_word_size();
  for (int i = 0; i < this->unknown_word_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->unknown_word(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netspeak.generated.Response)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Response* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netspeak.generated.Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netspeak.generated.Response)
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netspeak.generated.Response)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  query_token_.MergeFrom(from.query_token_);
  phrase_.MergeFrom(from.phrase_);
  unknown_word_.MergeFrom(from.unknown_word_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request()) {
      mutable_request()->::netspeak::generated::Request::MergeFrom(from.request());
    }
    if (from.has_query()) {
      mutable_query()->::netspeak::generated::Query::MergeFrom(from.query());
    }
    if (from.has_total_union_size()) {
      set_total_union_size(from.total_union_size());
    }
    if (from.has_total_frequency()) {
      set_total_frequency(from.total_frequency());
    }
    if (from.has_resume_frequency()) {
      set_resume_frequency(from.resume_frequency());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_error_message()) {
      set_has_error_message();
      error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netspeak.generated.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netspeak.generated.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {

  return true;
}

void Response::Swap(Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response::InternalSwap(Response* other) {
  std::swap(request_, other->request_);
  query_token_.UnsafeArenaSwap(&other->query_token_);
  std::swap(query_, other->query_);
  phrase_.UnsafeArenaSwap(&other->phrase_);
  unknown_word_.UnsafeArenaSwap(&other->unknown_word_);
  std::swap(total_union_size_, other->total_union_size_);
  std::swap(total_frequency_, other->total_frequency_);
  std::swap(resume_frequency_, other->resume_frequency_);
  std::swap(error_code_, other->error_code_);
  error_message_.Swap(&other->error_message_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Response

// optional .netspeak.generated.Request request = 1;
bool Response::has_request() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Response::set_has_request() {
  _has_bits_[0] |= 0x00000001u;
}
void Response::clear_has_request() {
  _has_bits_[0] &= ~0x00000001u;
}
void Response::clear_request() {
  if (request_ != NULL) request_->::netspeak::generated::Request::Clear();
  clear_has_request();
}
const ::netspeak::generated::Request& Response::request() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Response.request)
  return request_ != NULL ? *request_ : *default_instance_->request_;
}
::netspeak::generated::Request* Response::mutable_request() {
  set_has_request();
  if (request_ == NULL) {
    request_ = new ::netspeak::generated::Request;
  }
  // @@protoc_insertion_point(field_mutable:netspeak.generated.Response.request)
  return request_;
}
::netspeak::generated::Request* Response::release_request() {
  // @@protoc_insertion_point(field_release:netspeak.generated.Response.request)
  clear_has_request();
  ::netspeak::generated::Request* temp = request_;
  request_ = NULL;
  return temp;
}
void Response::set_allocated_request(::netspeak::generated::Request* request) {
  delete request_;
  request_ = request;
  if (request) {
    set_has_request();
  } else {
    clear_has_request();
  }
  // @@protoc_insertion_point(field_set_allocated:netspeak.generated.Response.request)
}

// repeated string query_token = 2;
int Response::query_token_size() const {
  return query_token_.size();
}
void Response::clear_query_token() {
  query_token_.Clear();
}
 const ::std::string& Response::query_token(int index) const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Response.query_token)
  return query_token_.Get(index);
}
 ::std::string* Response::mutable_query_token(int index) {
  // @@protoc_insertion_point(field_mutable:netspeak.generated.Response.query_token)
  return query_token_.Mutable(index);
}
 void Response::set_query_token(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:netspeak.generated.Response.query_token)
  query_token_.Mutable(index)->assign(value);
}
 void Response::set_query_token(int index, const char* value) {
  query_token_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:netspeak.generated.Response.query_token)
}
 void Response::set_query_token(int index, const char* value, size_t size) {
  query_token_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:netspeak.generated.Response.query_token)
}
 ::std::string* Response::add_query_token() {
  // @@protoc_insertion_point(field_add_mutable:netspeak.generated.Response.query_token)
  return query_token_.Add();
}
 void Response::add_query_token(const ::std::string& value) {
  query_token_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:netspeak.generated.Response.query_token)
}
 void Response::add_query_token(const char* value) {
  query_token_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:netspeak.generated.Response.query_token)
}
 void Response::add_query_token(const char* value, size_t size) {
  query_token_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:netspeak.generated.Response.query_token)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Response::query_token() const {
  // @@protoc_insertion_point(field_list:netspeak.generated.Response.query_token)
  return query_token_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Response::mutable_query_token() {
  // @@protoc_insertion_point(field_mutable_list:netspeak.generated.Response.query_token)
  return &query_token_;
}

// optional .netspeak.generated.Query query = 3;
bool Response::has_query() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Response::set_has_query() {
  _has_bits_[0] |= 0x00000004u;
}
void Response::clear_has_query() {
  _has_bits_[0] &= ~0x00000004u;
}
void Response::clear_query() {
  if (query_ != NULL) query_->::netspeak::generated::Query::Clear();
  clear_has_query();
}
const ::netspeak::generated::Query& Response::query() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Response.query)
  return query_ != NULL ? *query_ : *default_instance_->query_;
}
::netspeak::generated::Query* Response::mutable_query() {
  set_has_query();
  if (query_ == NULL) {
    query_ = new ::netspeak::generated::Query;
  }
  // @@protoc_insertion_point(field_mutable:netspeak.generated.Response.query)
  return query_;
}
::netspeak::generated::Query* Response::release_query() {
  // @@protoc_insertion_point(field_release:netspeak.generated.Response.query)
  clear_has_query();
  ::netspeak::generated::Query* temp = query_;
  query_ = NULL;
  return temp;
}
void Response::set_allocated_query(::netspeak::generated::Query* query) {
  delete query_;
  query_ = query;
  if (query) {
    set_has_query();
  } else {
    clear_has_query();
  }
  // @@protoc_insertion_point(field_set_allocated:netspeak.generated.Response.query)
}

// repeated .netspeak.generated.Phrase phrase = 4;
int Response::phrase_size() const {
  return phrase_.size();
}
void Response::clear_phrase() {
  phrase_.Clear();
}
const ::netspeak::generated::Phrase& Response::phrase(int index) const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Response.phrase)
  return phrase_.Get(index);
}
::netspeak::generated::Phrase* Response::mutable_phrase(int index) {
  // @@protoc_insertion_point(field_mutable:netspeak.generated.Response.phrase)
  return phrase_.Mutable(index);
}
::netspeak::generated::Phrase* Response::add_phrase() {
  // @@protoc_insertion_point(field_add:netspeak.generated.Response.phrase)
  return phrase_.Add();
}
::google::protobuf::RepeatedPtrField< ::netspeak::generated::Phrase >*
Response::mutable_phrase() {
  // @@protoc_insertion_point(field_mutable_list:netspeak.generated.Response.phrase)
  return &phrase_;
}
const ::google::protobuf::RepeatedPtrField< ::netspeak::generated::Phrase >&
Response::phrase() const {
  // @@protoc_insertion_point(field_list:netspeak.generated.Response.phrase)
  return phrase_;
}

// repeated string unknown_word = 5;
int Response::unknown_word_size() const {
  return unknown_word_.size();
}
void Response::clear_unknown_word() {
  unknown_word_.Clear();
}
 const ::std::string& Response::unknown_word(int index) const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Response.unknown_word)
  return unknown_word_.Get(index);
}
 ::std::string* Response::mutable_unknown_word(int index) {
  // @@protoc_insertion_point(field_mutable:netspeak.generated.Response.unknown_word)
  return unknown_word_.Mutable(index);
}
 void Response::set_unknown_word(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:netspeak.generated.Response.unknown_word)
  unknown_word_.Mutable(index)->assign(value);
}
 void Response::set_unknown_word(int index, const char* value) {
  unknown_word_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:netspeak.generated.Response.unknown_word)
}
 void Response::set_unknown_word(int index, const char* value, size_t size) {
  unknown_word_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:netspeak.generated.Response.unknown_word)
}
 ::std::string* Response::add_unknown_word() {
  // @@protoc_insertion_point(field_add_mutable:netspeak.generated.Response.unknown_word)
  return unknown_word_.Add();
}
 void Response::add_unknown_word(const ::std::string& value) {
  unknown_word_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:netspeak.generated.Response.unknown_word)
}
 void Response::add_unknown_word(const char* value) {
  unknown_word_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:netspeak.generated.Response.unknown_word)
}
 void Response::add_unknown_word(const char* value, size_t size) {
  unknown_word_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:netspeak.generated.Response.unknown_word)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Response::unknown_word() const {
  // @@protoc_insertion_point(field_list:netspeak.generated.Response.unknown_word)
  return unknown_word_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Response::mutable_unknown_word() {
  // @@protoc_insertion_point(field_mutable_list:netspeak.generated.Response.unknown_word)
  return &unknown_word_;
}

// optional uint64 total_union_size = 6 [default = 0];
bool Response::has_total_union_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Response::set_has_total_union_size() {
  _has_bits_[0] |= 0x00000020u;
}
void Response::clear_has_total_union_size() {
  _has_bits_[0] &= ~0x00000020u;
}
void Response::clear_total_union_size() {
  total_union_size_ = GOOGLE_ULONGLONG(0);
  clear_has_total_union_size();
}
 ::google::protobuf::uint64 Response::total_union_size() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Response.total_union_size)
  return total_union_size_;
}
 void Response::set_total_union_size(::google::protobuf::uint64 value) {
  set_has_total_union_size();
  total_union_size_ = value;
  // @@protoc_insertion_point(field_set:netspeak.generated.Response.total_union_size)
}

// optional uint64 total_frequency = 7 [default = 0];
bool Response::has_total_frequency() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Response::set_has_total_frequency() {
  _has_bits_[0] |= 0x00000040u;
}
void Response::clear_has_total_frequency() {
  _has_bits_[0] &= ~0x00000040u;
}
void Response::clear_total_frequency() {
  total_frequency_ = GOOGLE_ULONGLONG(0);
  clear_has_total_frequency();
}
 ::google::protobuf::uint64 Response::total_frequency() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Response.total_frequency)
  return total_frequency_;
}
 void Response::set_total_frequency(::google::protobuf::uint64 value) {
  set_has_total_frequency();
  total_frequency_ = value;
  // @@protoc_insertion_point(field_set:netspeak.generated.Response.total_frequency)
}

// optional uint64 resume_frequency = 8 [default = 0];
bool Response::has_resume_frequency() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Response::set_has_resume_frequency() {
  _has_bits_[0] |= 0x00000080u;
}
void Response::clear_has_resume_frequency() {
  _has_bits_[0] &= ~0x00000080u;
}
void Response::clear_resume_frequency() {
  resume_frequency_ = GOOGLE_ULONGLONG(0);
  clear_has_resume_frequency();
}
 ::google::protobuf::uint64 Response::resume_frequency() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Response.resume_frequency)
  return resume_frequency_;
}
 void Response::set_resume_frequency(::google::protobuf::uint64 value) {
  set_has_resume_frequency();
  resume_frequency_ = value;
  // @@protoc_insertion_point(field_set:netspeak.generated.Response.resume_frequency)
}

// optional uint32 error_code = 9 [default = 0];
bool Response::has_error_code() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Response::set_has_error_code() {
  _has_bits_[0] |= 0x00000100u;
}
void Response::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000100u;
}
void Response::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
 ::google::protobuf::uint32 Response::error_code() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Response.error_code)
  return error_code_;
}
 void Response::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:netspeak.generated.Response.error_code)
}

// optional string error_message = 10 [default = ""];
bool Response::has_error_message() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Response::set_has_error_message() {
  _has_bits_[0] |= 0x00000200u;
}
void Response::clear_has_error_message() {
  _has_bits_[0] &= ~0x00000200u;
}
void Response::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_message();
}
 const ::std::string& Response::error_message() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Response.error_message)
  return error_message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Response::set_error_message(const ::std::string& value) {
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:netspeak.generated.Response.error_message)
}
 void Response::set_error_message(const char* value) {
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:netspeak.generated.Response.error_message)
}
 void Response::set_error_message(const char* value, size_t size) {
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:netspeak.generated.Response.error_message)
}
 ::std::string* Response::mutable_error_message() {
  set_has_error_message();
  // @@protoc_insertion_point(field_mutable:netspeak.generated.Response.error_message)
  return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Response::release_error_message() {
  // @@protoc_insertion_point(field_release:netspeak.generated.Response.error_message)
  clear_has_error_message();
  return error_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Response::set_allocated_error_message(::std::string* error_message) {
  if (error_message != NULL) {
    set_has_error_message();
  } else {
    clear_has_error_message();
  }
  error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:netspeak.generated.Response.error_message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace generated
}  // namespace netspeak

// @@protoc_insertion_point(global_scope)
