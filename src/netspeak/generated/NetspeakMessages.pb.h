// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NetspeakMessages.proto

#ifndef PROTOBUF_NetspeakMessages_2eproto__INCLUDED
#define PROTOBUF_NetspeakMessages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace netspeak {
namespace generated {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_NetspeakMessages_2eproto();
void protobuf_AssignDesc_NetspeakMessages_2eproto();
void protobuf_ShutdownFile_NetspeakMessages_2eproto();

class Phrase;
class Phrase_Word;
class Properties;
class Properties_Property;
class Query;
class QueryResult;
class QueryResult_PhraseRef;
class Query_Unit;
class RawResponse;
class Request;
class Response;

enum Query_Unit_Tag {
  Query_Unit_Tag_WORD = 0,
  Query_Unit_Tag_QMARK = 1,
  Query_Unit_Tag_ASTERISK = 2,
  Query_Unit_Tag_DICTSET = 3,
  Query_Unit_Tag_ORDERSET = 4,
  Query_Unit_Tag_OPTIONSET = 5,
  Query_Unit_Tag_QMARK_FOR_ASTERISK = 6,
  Query_Unit_Tag_WORD_IN_DICTSET = 7,
  Query_Unit_Tag_WORD_IN_ORDERSET = 8,
  Query_Unit_Tag_WORD_IN_OPTIONSET = 9,
  Query_Unit_Tag_PLUS = 10,
  Query_Unit_Tag_QMARK_FOR_PLUS = 11,
  Query_Unit_Tag_REGEXWORD = 12,
  Query_Unit_Tag_WORD_FOR_REGEX = 13,
  Query_Unit_Tag_WORD_FOR_REGEX_IN_ORDERSET = 14,
  Query_Unit_Tag_WORD_FOR_REGEX_IN_OPTIONSET = 15,
  Query_Unit_Tag_ASSOCIATION = 16
};
bool Query_Unit_Tag_IsValid(int value);
const Query_Unit_Tag Query_Unit_Tag_Tag_MIN = Query_Unit_Tag_WORD;
const Query_Unit_Tag Query_Unit_Tag_Tag_MAX = Query_Unit_Tag_ASSOCIATION;
const int Query_Unit_Tag_Tag_ARRAYSIZE = Query_Unit_Tag_Tag_MAX + 1;

const ::google::protobuf::EnumDescriptor* Query_Unit_Tag_descriptor();
inline const ::std::string& Query_Unit_Tag_Name(Query_Unit_Tag value) {
  return ::google::protobuf::internal::NameOfEnum(
    Query_Unit_Tag_descriptor(), value);
}
inline bool Query_Unit_Tag_Parse(
    const ::std::string& name, Query_Unit_Tag* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Query_Unit_Tag>(
    Query_Unit_Tag_descriptor(), name, value);
}
enum Phrase_Word_Tag {
  Phrase_Word_Tag_WORD = 0,
  Phrase_Word_Tag_WORD_FOR_QMARK = 1,
  Phrase_Word_Tag_WORD_FOR_ASTERISK = 2,
  Phrase_Word_Tag_WORD_IN_DICTSET = 3,
  Phrase_Word_Tag_WORD_IN_ORDERSET = 4,
  Phrase_Word_Tag_WORD_IN_OPTIONSET = 5,
  Phrase_Word_Tag_WORD_FOR_PLUS = 6,
  Phrase_Word_Tag_WORD_FOR_REGEX = 7,
  Phrase_Word_Tag_WORD_FOR_REGEX_IN_ORDERSET = 8,
  Phrase_Word_Tag_WORD_FOR_REGEX_IN_OPTIONSET = 9
};
bool Phrase_Word_Tag_IsValid(int value);
const Phrase_Word_Tag Phrase_Word_Tag_Tag_MIN = Phrase_Word_Tag_WORD;
const Phrase_Word_Tag Phrase_Word_Tag_Tag_MAX = Phrase_Word_Tag_WORD_FOR_REGEX_IN_OPTIONSET;
const int Phrase_Word_Tag_Tag_ARRAYSIZE = Phrase_Word_Tag_Tag_MAX + 1;

const ::google::protobuf::EnumDescriptor* Phrase_Word_Tag_descriptor();
inline const ::std::string& Phrase_Word_Tag_Name(Phrase_Word_Tag value) {
  return ::google::protobuf::internal::NameOfEnum(
    Phrase_Word_Tag_descriptor(), value);
}
inline bool Phrase_Word_Tag_Parse(
    const ::std::string& name, Phrase_Word_Tag* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Phrase_Word_Tag>(
    Phrase_Word_Tag_descriptor(), name, value);
}
// ===================================================================

class Properties_Property : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:netspeak.generated.Properties.Property) */ {
 public:
  Properties_Property();
  virtual ~Properties_Property();

  Properties_Property(const Properties_Property& from);

  inline Properties_Property& operator=(const Properties_Property& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Properties_Property& default_instance();

  void Swap(Properties_Property* other);

  // implements Message ----------------------------------------------

  inline Properties_Property* New() const { return New(NULL); }

  Properties_Property* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Properties_Property& from);
  void MergeFrom(const Properties_Property& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Properties_Property* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional string value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:netspeak.generated.Properties.Property)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  friend void  protobuf_AddDesc_NetspeakMessages_2eproto();
  friend void protobuf_AssignDesc_NetspeakMessages_2eproto();
  friend void protobuf_ShutdownFile_NetspeakMessages_2eproto();

  void InitAsDefaultInstance();
  static Properties_Property* default_instance_;
};
// -------------------------------------------------------------------

class Properties : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:netspeak.generated.Properties) */ {
 public:
  Properties();
  virtual ~Properties();

  Properties(const Properties& from);

  inline Properties& operator=(const Properties& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Properties& default_instance();

  void Swap(Properties* other);

  // implements Message ----------------------------------------------

  inline Properties* New() const { return New(NULL); }

  Properties* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Properties& from);
  void MergeFrom(const Properties& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Properties* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Properties_Property Property;

  // accessors -------------------------------------------------------

  // repeated .netspeak.generated.Properties.Property property = 1;
  int property_size() const;
  void clear_property();
  static const int kPropertyFieldNumber = 1;
  const ::netspeak::generated::Properties_Property& property(int index) const;
  ::netspeak::generated::Properties_Property* mutable_property(int index);
  ::netspeak::generated::Properties_Property* add_property();
  ::google::protobuf::RepeatedPtrField< ::netspeak::generated::Properties_Property >*
      mutable_property();
  const ::google::protobuf::RepeatedPtrField< ::netspeak::generated::Properties_Property >&
      property() const;

  // @@protoc_insertion_point(class_scope:netspeak.generated.Properties)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::netspeak::generated::Properties_Property > property_;
  friend void  protobuf_AddDesc_NetspeakMessages_2eproto();
  friend void protobuf_AssignDesc_NetspeakMessages_2eproto();
  friend void protobuf_ShutdownFile_NetspeakMessages_2eproto();

  void InitAsDefaultInstance();
  static Properties* default_instance_;
};
// -------------------------------------------------------------------

class Query_Unit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:netspeak.generated.Query.Unit) */ {
 public:
  Query_Unit();
  virtual ~Query_Unit();

  Query_Unit(const Query_Unit& from);

  inline Query_Unit& operator=(const Query_Unit& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Query_Unit& default_instance();

  void Swap(Query_Unit* other);

  // implements Message ----------------------------------------------

  inline Query_Unit* New() const { return New(NULL); }

  Query_Unit* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Query_Unit& from);
  void MergeFrom(const Query_Unit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Query_Unit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Query_Unit_Tag Tag;
  static const Tag WORD =
    Query_Unit_Tag_WORD;
  static const Tag QMARK =
    Query_Unit_Tag_QMARK;
  static const Tag ASTERISK =
    Query_Unit_Tag_ASTERISK;
  static const Tag DICTSET =
    Query_Unit_Tag_DICTSET;
  static const Tag ORDERSET =
    Query_Unit_Tag_ORDERSET;
  static const Tag OPTIONSET =
    Query_Unit_Tag_OPTIONSET;
  static const Tag QMARK_FOR_ASTERISK =
    Query_Unit_Tag_QMARK_FOR_ASTERISK;
  static const Tag WORD_IN_DICTSET =
    Query_Unit_Tag_WORD_IN_DICTSET;
  static const Tag WORD_IN_ORDERSET =
    Query_Unit_Tag_WORD_IN_ORDERSET;
  static const Tag WORD_IN_OPTIONSET =
    Query_Unit_Tag_WORD_IN_OPTIONSET;
  static const Tag PLUS =
    Query_Unit_Tag_PLUS;
  static const Tag QMARK_FOR_PLUS =
    Query_Unit_Tag_QMARK_FOR_PLUS;
  static const Tag REGEXWORD =
    Query_Unit_Tag_REGEXWORD;
  static const Tag WORD_FOR_REGEX =
    Query_Unit_Tag_WORD_FOR_REGEX;
  static const Tag WORD_FOR_REGEX_IN_ORDERSET =
    Query_Unit_Tag_WORD_FOR_REGEX_IN_ORDERSET;
  static const Tag WORD_FOR_REGEX_IN_OPTIONSET =
    Query_Unit_Tag_WORD_FOR_REGEX_IN_OPTIONSET;
  static const Tag ASSOCIATION =
    Query_Unit_Tag_ASSOCIATION;
  static inline bool Tag_IsValid(int value) {
    return Query_Unit_Tag_IsValid(value);
  }
  static const Tag Tag_MIN =
    Query_Unit_Tag_Tag_MIN;
  static const Tag Tag_MAX =
    Query_Unit_Tag_Tag_MAX;
  static const int Tag_ARRAYSIZE =
    Query_Unit_Tag_Tag_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Tag_descriptor() {
    return Query_Unit_Tag_descriptor();
  }
  static inline const ::std::string& Tag_Name(Tag value) {
    return Query_Unit_Tag_Name(value);
  }
  static inline bool Tag_Parse(const ::std::string& name,
      Tag* value) {
    return Query_Unit_Tag_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .netspeak.generated.Query.Unit.Tag tag = 1 [default = WORD];
  bool has_tag() const;
  void clear_tag();
  static const int kTagFieldNumber = 1;
  ::netspeak::generated::Query_Unit_Tag tag() const;
  void set_tag(::netspeak::generated::Query_Unit_Tag value);

  // optional string text = 2;
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 2;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // optional uint32 position = 3 [default = 0];
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 3;
  ::google::protobuf::uint32 position() const;
  void set_position(::google::protobuf::uint32 value);

  // optional uint64 frequency = 4 [default = 0];
  bool has_frequency() const;
  void clear_frequency();
  static const int kFrequencyFieldNumber = 4;
  ::google::protobuf::uint64 frequency() const;
  void set_frequency(::google::protobuf::uint64 value);

  // optional double quantile = 5 [default = 0];
  bool has_quantile() const;
  void clear_quantile();
  static const int kQuantileFieldNumber = 5;
  double quantile() const;
  void set_quantile(double value);

  // optional uint32 pruning = 6 [default = 0];
  bool has_pruning() const;
  void clear_pruning();
  static const int kPruningFieldNumber = 6;
  ::google::protobuf::uint32 pruning() const;
  void set_pruning(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:netspeak.generated.Query.Unit)
 private:
  inline void set_has_tag();
  inline void clear_has_tag();
  inline void set_has_text();
  inline void clear_has_text();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_frequency();
  inline void clear_has_frequency();
  inline void set_has_quantile();
  inline void clear_has_quantile();
  inline void set_has_pruning();
  inline void clear_has_pruning();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  int tag_;
  ::google::protobuf::uint32 position_;
  ::google::protobuf::uint64 frequency_;
  double quantile_;
  ::google::protobuf::uint32 pruning_;
  friend void  protobuf_AddDesc_NetspeakMessages_2eproto();
  friend void protobuf_AssignDesc_NetspeakMessages_2eproto();
  friend void protobuf_ShutdownFile_NetspeakMessages_2eproto();

  void InitAsDefaultInstance();
  static Query_Unit* default_instance_;
};
// -------------------------------------------------------------------

class Query : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:netspeak.generated.Query) */ {
 public:
  Query();
  virtual ~Query();

  Query(const Query& from);

  inline Query& operator=(const Query& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Query& default_instance();

  void Swap(Query* other);

  // implements Message ----------------------------------------------

  inline Query* New() const { return New(NULL); }

  Query* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Query& from);
  void MergeFrom(const Query& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Query* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Query_Unit Unit;

  // accessors -------------------------------------------------------

  // repeated .netspeak.generated.Query.Unit unit = 1;
  int unit_size() const;
  void clear_unit();
  static const int kUnitFieldNumber = 1;
  const ::netspeak::generated::Query_Unit& unit(int index) const;
  ::netspeak::generated::Query_Unit* mutable_unit(int index);
  ::netspeak::generated::Query_Unit* add_unit();
  ::google::protobuf::RepeatedPtrField< ::netspeak::generated::Query_Unit >*
      mutable_unit();
  const ::google::protobuf::RepeatedPtrField< ::netspeak::generated::Query_Unit >&
      unit() const;

  // @@protoc_insertion_point(class_scope:netspeak.generated.Query)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::netspeak::generated::Query_Unit > unit_;
  friend void  protobuf_AddDesc_NetspeakMessages_2eproto();
  friend void protobuf_AssignDesc_NetspeakMessages_2eproto();
  friend void protobuf_ShutdownFile_NetspeakMessages_2eproto();

  void InitAsDefaultInstance();
  static Query* default_instance_;
};
// -------------------------------------------------------------------

class Phrase_Word : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:netspeak.generated.Phrase.Word) */ {
 public:
  Phrase_Word();
  virtual ~Phrase_Word();

  Phrase_Word(const Phrase_Word& from);

  inline Phrase_Word& operator=(const Phrase_Word& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Phrase_Word& default_instance();

  void Swap(Phrase_Word* other);

  // implements Message ----------------------------------------------

  inline Phrase_Word* New() const { return New(NULL); }

  Phrase_Word* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Phrase_Word& from);
  void MergeFrom(const Phrase_Word& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Phrase_Word* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Phrase_Word_Tag Tag;
  static const Tag WORD =
    Phrase_Word_Tag_WORD;
  static const Tag WORD_FOR_QMARK =
    Phrase_Word_Tag_WORD_FOR_QMARK;
  static const Tag WORD_FOR_ASTERISK =
    Phrase_Word_Tag_WORD_FOR_ASTERISK;
  static const Tag WORD_IN_DICTSET =
    Phrase_Word_Tag_WORD_IN_DICTSET;
  static const Tag WORD_IN_ORDERSET =
    Phrase_Word_Tag_WORD_IN_ORDERSET;
  static const Tag WORD_IN_OPTIONSET =
    Phrase_Word_Tag_WORD_IN_OPTIONSET;
  static const Tag WORD_FOR_PLUS =
    Phrase_Word_Tag_WORD_FOR_PLUS;
  static const Tag WORD_FOR_REGEX =
    Phrase_Word_Tag_WORD_FOR_REGEX;
  static const Tag WORD_FOR_REGEX_IN_ORDERSET =
    Phrase_Word_Tag_WORD_FOR_REGEX_IN_ORDERSET;
  static const Tag WORD_FOR_REGEX_IN_OPTIONSET =
    Phrase_Word_Tag_WORD_FOR_REGEX_IN_OPTIONSET;
  static inline bool Tag_IsValid(int value) {
    return Phrase_Word_Tag_IsValid(value);
  }
  static const Tag Tag_MIN =
    Phrase_Word_Tag_Tag_MIN;
  static const Tag Tag_MAX =
    Phrase_Word_Tag_Tag_MAX;
  static const int Tag_ARRAYSIZE =
    Phrase_Word_Tag_Tag_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Tag_descriptor() {
    return Phrase_Word_Tag_descriptor();
  }
  static inline const ::std::string& Tag_Name(Tag value) {
    return Phrase_Word_Tag_Name(value);
  }
  static inline bool Tag_Parse(const ::std::string& name,
      Tag* value) {
    return Phrase_Word_Tag_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .netspeak.generated.Phrase.Word.Tag tag = 1 [default = WORD];
  bool has_tag() const;
  void clear_tag();
  static const int kTagFieldNumber = 1;
  ::netspeak::generated::Phrase_Word_Tag tag() const;
  void set_tag(::netspeak::generated::Phrase_Word_Tag value);

  // optional string text = 2;
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 2;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // @@protoc_insertion_point(class_scope:netspeak.generated.Phrase.Word)
 private:
  inline void set_has_tag();
  inline void clear_has_tag();
  inline void set_has_text();
  inline void clear_has_text();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  int tag_;
  friend void  protobuf_AddDesc_NetspeakMessages_2eproto();
  friend void protobuf_AssignDesc_NetspeakMessages_2eproto();
  friend void protobuf_ShutdownFile_NetspeakMessages_2eproto();

  void InitAsDefaultInstance();
  static Phrase_Word* default_instance_;
};
// -------------------------------------------------------------------

class Phrase : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:netspeak.generated.Phrase) */ {
 public:
  Phrase();
  virtual ~Phrase();

  Phrase(const Phrase& from);

  inline Phrase& operator=(const Phrase& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Phrase& default_instance();

  void Swap(Phrase* other);

  // implements Message ----------------------------------------------

  inline Phrase* New() const { return New(NULL); }

  Phrase* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Phrase& from);
  void MergeFrom(const Phrase& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Phrase* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Phrase_Word Word;

  // accessors -------------------------------------------------------

  // optional uint64 id = 1 [default = 0];
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // optional uint64 frequency = 2 [default = 0];
  bool has_frequency() const;
  void clear_frequency();
  static const int kFrequencyFieldNumber = 2;
  ::google::protobuf::uint64 frequency() const;
  void set_frequency(::google::protobuf::uint64 value);

  // repeated .netspeak.generated.Phrase.Word word = 3;
  int word_size() const;
  void clear_word();
  static const int kWordFieldNumber = 3;
  const ::netspeak::generated::Phrase_Word& word(int index) const;
  ::netspeak::generated::Phrase_Word* mutable_word(int index);
  ::netspeak::generated::Phrase_Word* add_word();
  ::google::protobuf::RepeatedPtrField< ::netspeak::generated::Phrase_Word >*
      mutable_word();
  const ::google::protobuf::RepeatedPtrField< ::netspeak::generated::Phrase_Word >&
      word() const;

  // @@protoc_insertion_point(class_scope:netspeak.generated.Phrase)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_frequency();
  inline void clear_has_frequency();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 frequency_;
  ::google::protobuf::RepeatedPtrField< ::netspeak::generated::Phrase_Word > word_;
  friend void  protobuf_AddDesc_NetspeakMessages_2eproto();
  friend void protobuf_AssignDesc_NetspeakMessages_2eproto();
  friend void protobuf_ShutdownFile_NetspeakMessages_2eproto();

  void InitAsDefaultInstance();
  static Phrase* default_instance_;
};
// -------------------------------------------------------------------

class Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:netspeak.generated.Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  void Swap(Request* other);

  // implements Message ----------------------------------------------

  inline Request* New() const { return New(NULL); }

  Request* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string query = 1;
  bool has_query() const;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // optional uint32 max_phrase_count = 2 [default = 100];
  bool has_max_phrase_count() const;
  void clear_max_phrase_count();
  static const int kMaxPhraseCountFieldNumber = 2;
  ::google::protobuf::uint32 max_phrase_count() const;
  void set_max_phrase_count(::google::protobuf::uint32 value);

  // optional uint64 max_phrase_frequency = 3 [default = 0];
  bool has_max_phrase_frequency() const;
  void clear_max_phrase_frequency();
  static const int kMaxPhraseFrequencyFieldNumber = 3;
  ::google::protobuf::uint64 max_phrase_frequency() const;
  void set_max_phrase_frequency(::google::protobuf::uint64 value);

  // optional uint32 phrase_length_min = 4 [default = 1];
  bool has_phrase_length_min() const;
  void clear_phrase_length_min();
  static const int kPhraseLengthMinFieldNumber = 4;
  ::google::protobuf::uint32 phrase_length_min() const;
  void set_phrase_length_min(::google::protobuf::uint32 value);

  // optional uint32 phrase_length_max = 5 [default = 5];
  bool has_phrase_length_max() const;
  void clear_phrase_length_max();
  static const int kPhraseLengthMaxFieldNumber = 5;
  ::google::protobuf::uint32 phrase_length_max() const;
  void set_phrase_length_max(::google::protobuf::uint32 value);

  // optional uint32 pruning_low = 6 [default = 130000];
  bool has_pruning_low() const;
  void clear_pruning_low();
  static const int kPruningLowFieldNumber = 6;
  ::google::protobuf::uint32 pruning_low() const;
  void set_pruning_low(::google::protobuf::uint32 value);

  // optional uint32 pruning_high = 7 [default = 160000];
  bool has_pruning_high() const;
  void clear_pruning_high();
  static const int kPruningHighFieldNumber = 7;
  ::google::protobuf::uint32 pruning_high() const;
  void set_pruning_high(::google::protobuf::uint32 value);

  // optional double quantile_low = 8 [default = 0.5];
  bool has_quantile_low() const;
  void clear_quantile_low();
  static const int kQuantileLowFieldNumber = 8;
  double quantile_low() const;
  void set_quantile_low(double value);

  // optional double quantile_high = 9 [default = 0.8];
  bool has_quantile_high() const;
  void clear_quantile_high();
  static const int kQuantileHighFieldNumber = 9;
  double quantile_high() const;
  void set_quantile_high(double value);

  // optional uint32 max_regexword_matches = 10 [default = 10];
  bool has_max_regexword_matches() const;
  void clear_max_regexword_matches();
  static const int kMaxRegexwordMatchesFieldNumber = 10;
  ::google::protobuf::uint32 max_regexword_matches() const;
  void set_max_regexword_matches(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:netspeak.generated.Request)
 private:
  inline void set_has_query();
  inline void clear_has_query();
  inline void set_has_max_phrase_count();
  inline void clear_has_max_phrase_count();
  inline void set_has_max_phrase_frequency();
  inline void clear_has_max_phrase_frequency();
  inline void set_has_phrase_length_min();
  inline void clear_has_phrase_length_min();
  inline void set_has_phrase_length_max();
  inline void clear_has_phrase_length_max();
  inline void set_has_pruning_low();
  inline void clear_has_pruning_low();
  inline void set_has_pruning_high();
  inline void clear_has_pruning_high();
  inline void set_has_quantile_low();
  inline void clear_has_quantile_low();
  inline void set_has_quantile_high();
  inline void clear_has_quantile_high();
  inline void set_has_max_regexword_matches();
  inline void clear_has_max_regexword_matches();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  ::google::protobuf::uint64 max_phrase_frequency_;
  ::google::protobuf::uint32 max_phrase_count_;
  ::google::protobuf::uint32 phrase_length_min_;
  ::google::protobuf::uint32 phrase_length_max_;
  ::google::protobuf::uint32 pruning_low_;
  double quantile_low_;
  ::google::protobuf::uint32 pruning_high_;
  ::google::protobuf::uint32 max_regexword_matches_;
  double quantile_high_;
  friend void  protobuf_AddDesc_NetspeakMessages_2eproto();
  friend void protobuf_AssignDesc_NetspeakMessages_2eproto();
  friend void protobuf_ShutdownFile_NetspeakMessages_2eproto();

  void InitAsDefaultInstance();
  static Request* default_instance_;
};
// -------------------------------------------------------------------

class QueryResult_PhraseRef : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:netspeak.generated.QueryResult.PhraseRef) */ {
 public:
  QueryResult_PhraseRef();
  virtual ~QueryResult_PhraseRef();

  QueryResult_PhraseRef(const QueryResult_PhraseRef& from);

  inline QueryResult_PhraseRef& operator=(const QueryResult_PhraseRef& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryResult_PhraseRef& default_instance();

  void Swap(QueryResult_PhraseRef* other);

  // implements Message ----------------------------------------------

  inline QueryResult_PhraseRef* New() const { return New(NULL); }

  QueryResult_PhraseRef* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryResult_PhraseRef& from);
  void MergeFrom(const QueryResult_PhraseRef& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueryResult_PhraseRef* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 query_id = 1 [default = 0];
  bool has_query_id() const;
  void clear_query_id();
  static const int kQueryIdFieldNumber = 1;
  ::google::protobuf::uint32 query_id() const;
  void set_query_id(::google::protobuf::uint32 value);

  // optional uint32 frequency = 2 [default = 0];
  bool has_frequency() const;
  void clear_frequency();
  static const int kFrequencyFieldNumber = 2;
  ::google::protobuf::uint32 frequency() const;
  void set_frequency(::google::protobuf::uint32 value);

  // optional uint32 length = 3 [default = 0];
  bool has_length() const;
  void clear_length();
  static const int kLengthFieldNumber = 3;
  ::google::protobuf::uint32 length() const;
  void set_length(::google::protobuf::uint32 value);

  // optional uint32 id = 4 [default = 0];
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 4;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:netspeak.generated.QueryResult.PhraseRef)
 private:
  inline void set_has_query_id();
  inline void clear_has_query_id();
  inline void set_has_frequency();
  inline void clear_has_frequency();
  inline void set_has_length();
  inline void clear_has_length();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 query_id_;
  ::google::protobuf::uint32 frequency_;
  ::google::protobuf::uint32 length_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_NetspeakMessages_2eproto();
  friend void protobuf_AssignDesc_NetspeakMessages_2eproto();
  friend void protobuf_ShutdownFile_NetspeakMessages_2eproto();

  void InitAsDefaultInstance();
  static QueryResult_PhraseRef* default_instance_;
};
// -------------------------------------------------------------------

class QueryResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:netspeak.generated.QueryResult) */ {
 public:
  QueryResult();
  virtual ~QueryResult();

  QueryResult(const QueryResult& from);

  inline QueryResult& operator=(const QueryResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryResult& default_instance();

  void Swap(QueryResult* other);

  // implements Message ----------------------------------------------

  inline QueryResult* New() const { return New(NULL); }

  QueryResult* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryResult& from);
  void MergeFrom(const QueryResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueryResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef QueryResult_PhraseRef PhraseRef;

  // accessors -------------------------------------------------------

  // optional .netspeak.generated.Query query = 1;
  bool has_query() const;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::netspeak::generated::Query& query() const;
  ::netspeak::generated::Query* mutable_query();
  ::netspeak::generated::Query* release_query();
  void set_allocated_query(::netspeak::generated::Query* query);

  // optional .netspeak.generated.Request request = 2;
  bool has_request() const;
  void clear_request();
  static const int kRequestFieldNumber = 2;
  const ::netspeak::generated::Request& request() const;
  ::netspeak::generated::Request* mutable_request();
  ::netspeak::generated::Request* release_request();
  void set_allocated_request(::netspeak::generated::Request* request);

  // repeated .netspeak.generated.QueryResult.PhraseRef reference = 3;
  int reference_size() const;
  void clear_reference();
  static const int kReferenceFieldNumber = 3;
  const ::netspeak::generated::QueryResult_PhraseRef& reference(int index) const;
  ::netspeak::generated::QueryResult_PhraseRef* mutable_reference(int index);
  ::netspeak::generated::QueryResult_PhraseRef* add_reference();
  ::google::protobuf::RepeatedPtrField< ::netspeak::generated::QueryResult_PhraseRef >*
      mutable_reference();
  const ::google::protobuf::RepeatedPtrField< ::netspeak::generated::QueryResult_PhraseRef >&
      reference() const;

  // optional .netspeak.generated.Phrase phrase = 4;
  bool has_phrase() const;
  void clear_phrase();
  static const int kPhraseFieldNumber = 4;
  const ::netspeak::generated::Phrase& phrase() const;
  ::netspeak::generated::Phrase* mutable_phrase();
  ::netspeak::generated::Phrase* release_phrase();
  void set_allocated_phrase(::netspeak::generated::Phrase* phrase);

  // optional uint64 union_size = 5 [default = 0];
  bool has_union_size() const;
  void clear_union_size();
  static const int kUnionSizeFieldNumber = 5;
  ::google::protobuf::uint64 union_size() const;
  void set_union_size(::google::protobuf::uint64 value);

  // repeated string unknown_word = 6;
  int unknown_word_size() const;
  void clear_unknown_word();
  static const int kUnknownWordFieldNumber = 6;
  const ::std::string& unknown_word(int index) const;
  ::std::string* mutable_unknown_word(int index);
  void set_unknown_word(int index, const ::std::string& value);
  void set_unknown_word(int index, const char* value);
  void set_unknown_word(int index, const char* value, size_t size);
  ::std::string* add_unknown_word();
  void add_unknown_word(const ::std::string& value);
  void add_unknown_word(const char* value);
  void add_unknown_word(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& unknown_word() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_unknown_word();

  // @@protoc_insertion_point(class_scope:netspeak.generated.QueryResult)
 private:
  inline void set_has_query();
  inline void clear_has_query();
  inline void set_has_request();
  inline void clear_has_request();
  inline void set_has_phrase();
  inline void clear_has_phrase();
  inline void set_has_union_size();
  inline void clear_has_union_size();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::netspeak::generated::Query* query_;
  ::netspeak::generated::Request* request_;
  ::google::protobuf::RepeatedPtrField< ::netspeak::generated::QueryResult_PhraseRef > reference_;
  ::netspeak::generated::Phrase* phrase_;
  ::google::protobuf::uint64 union_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> unknown_word_;
  friend void  protobuf_AddDesc_NetspeakMessages_2eproto();
  friend void protobuf_AssignDesc_NetspeakMessages_2eproto();
  friend void protobuf_ShutdownFile_NetspeakMessages_2eproto();

  void InitAsDefaultInstance();
  static QueryResult* default_instance_;
};
// -------------------------------------------------------------------

class RawResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:netspeak.generated.RawResponse) */ {
 public:
  RawResponse();
  virtual ~RawResponse();

  RawResponse(const RawResponse& from);

  inline RawResponse& operator=(const RawResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RawResponse& default_instance();

  void Swap(RawResponse* other);

  // implements Message ----------------------------------------------

  inline RawResponse* New() const { return New(NULL); }

  RawResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RawResponse& from);
  void MergeFrom(const RawResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RawResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .netspeak.generated.Request request = 1;
  bool has_request() const;
  void clear_request();
  static const int kRequestFieldNumber = 1;
  const ::netspeak::generated::Request& request() const;
  ::netspeak::generated::Request* mutable_request();
  ::netspeak::generated::Request* release_request();
  void set_allocated_request(::netspeak::generated::Request* request);

  // repeated string query_token = 2;
  int query_token_size() const;
  void clear_query_token();
  static const int kQueryTokenFieldNumber = 2;
  const ::std::string& query_token(int index) const;
  ::std::string* mutable_query_token(int index);
  void set_query_token(int index, const ::std::string& value);
  void set_query_token(int index, const char* value);
  void set_query_token(int index, const char* value, size_t size);
  ::std::string* add_query_token();
  void add_query_token(const ::std::string& value);
  void add_query_token(const char* value);
  void add_query_token(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& query_token() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_query_token();

  // optional .netspeak.generated.Query query = 3;
  bool has_query() const;
  void clear_query();
  static const int kQueryFieldNumber = 3;
  const ::netspeak::generated::Query& query() const;
  ::netspeak::generated::Query* mutable_query();
  ::netspeak::generated::Query* release_query();
  void set_allocated_query(::netspeak::generated::Query* query);

  // repeated .netspeak.generated.QueryResult query_result = 4;
  int query_result_size() const;
  void clear_query_result();
  static const int kQueryResultFieldNumber = 4;
  const ::netspeak::generated::QueryResult& query_result(int index) const;
  ::netspeak::generated::QueryResult* mutable_query_result(int index);
  ::netspeak::generated::QueryResult* add_query_result();
  ::google::protobuf::RepeatedPtrField< ::netspeak::generated::QueryResult >*
      mutable_query_result();
  const ::google::protobuf::RepeatedPtrField< ::netspeak::generated::QueryResult >&
      query_result() const;

  // optional uint32 error_code = 5 [default = 0];
  bool has_error_code() const;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 5;
  ::google::protobuf::uint32 error_code() const;
  void set_error_code(::google::protobuf::uint32 value);

  // optional string error_message = 6;
  bool has_error_message() const;
  void clear_error_message();
  static const int kErrorMessageFieldNumber = 6;
  const ::std::string& error_message() const;
  void set_error_message(const ::std::string& value);
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  ::std::string* mutable_error_message();
  ::std::string* release_error_message();
  void set_allocated_error_message(::std::string* error_message);

  // @@protoc_insertion_point(class_scope:netspeak.generated.RawResponse)
 private:
  inline void set_has_request();
  inline void clear_has_request();
  inline void set_has_query();
  inline void clear_has_query();
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_error_message();
  inline void clear_has_error_message();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::netspeak::generated::Request* request_;
  ::google::protobuf::RepeatedPtrField< ::std::string> query_token_;
  ::netspeak::generated::Query* query_;
  ::google::protobuf::RepeatedPtrField< ::netspeak::generated::QueryResult > query_result_;
  ::google::protobuf::internal::ArenaStringPtr error_message_;
  ::google::protobuf::uint32 error_code_;
  friend void  protobuf_AddDesc_NetspeakMessages_2eproto();
  friend void protobuf_AssignDesc_NetspeakMessages_2eproto();
  friend void protobuf_ShutdownFile_NetspeakMessages_2eproto();

  void InitAsDefaultInstance();
  static RawResponse* default_instance_;
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:netspeak.generated.Response) */ {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  void Swap(Response* other);

  // implements Message ----------------------------------------------

  inline Response* New() const { return New(NULL); }

  Response* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .netspeak.generated.Request request = 1;
  bool has_request() const;
  void clear_request();
  static const int kRequestFieldNumber = 1;
  const ::netspeak::generated::Request& request() const;
  ::netspeak::generated::Request* mutable_request();
  ::netspeak::generated::Request* release_request();
  void set_allocated_request(::netspeak::generated::Request* request);

  // repeated string query_token = 2;
  int query_token_size() const;
  void clear_query_token();
  static const int kQueryTokenFieldNumber = 2;
  const ::std::string& query_token(int index) const;
  ::std::string* mutable_query_token(int index);
  void set_query_token(int index, const ::std::string& value);
  void set_query_token(int index, const char* value);
  void set_query_token(int index, const char* value, size_t size);
  ::std::string* add_query_token();
  void add_query_token(const ::std::string& value);
  void add_query_token(const char* value);
  void add_query_token(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& query_token() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_query_token();

  // optional .netspeak.generated.Query query = 3;
  bool has_query() const;
  void clear_query();
  static const int kQueryFieldNumber = 3;
  const ::netspeak::generated::Query& query() const;
  ::netspeak::generated::Query* mutable_query();
  ::netspeak::generated::Query* release_query();
  void set_allocated_query(::netspeak::generated::Query* query);

  // repeated .netspeak.generated.Phrase phrase = 4;
  int phrase_size() const;
  void clear_phrase();
  static const int kPhraseFieldNumber = 4;
  const ::netspeak::generated::Phrase& phrase(int index) const;
  ::netspeak::generated::Phrase* mutable_phrase(int index);
  ::netspeak::generated::Phrase* add_phrase();
  ::google::protobuf::RepeatedPtrField< ::netspeak::generated::Phrase >*
      mutable_phrase();
  const ::google::protobuf::RepeatedPtrField< ::netspeak::generated::Phrase >&
      phrase() const;

  // repeated string unknown_word = 5;
  int unknown_word_size() const;
  void clear_unknown_word();
  static const int kUnknownWordFieldNumber = 5;
  const ::std::string& unknown_word(int index) const;
  ::std::string* mutable_unknown_word(int index);
  void set_unknown_word(int index, const ::std::string& value);
  void set_unknown_word(int index, const char* value);
  void set_unknown_word(int index, const char* value, size_t size);
  ::std::string* add_unknown_word();
  void add_unknown_word(const ::std::string& value);
  void add_unknown_word(const char* value);
  void add_unknown_word(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& unknown_word() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_unknown_word();

  // optional uint64 total_union_size = 6 [default = 0];
  bool has_total_union_size() const;
  void clear_total_union_size();
  static const int kTotalUnionSizeFieldNumber = 6;
  ::google::protobuf::uint64 total_union_size() const;
  void set_total_union_size(::google::protobuf::uint64 value);

  // optional uint64 total_frequency = 7 [default = 0];
  bool has_total_frequency() const;
  void clear_total_frequency();
  static const int kTotalFrequencyFieldNumber = 7;
  ::google::protobuf::uint64 total_frequency() const;
  void set_total_frequency(::google::protobuf::uint64 value);

  // optional uint64 resume_frequency = 8 [default = 0];
  bool has_resume_frequency() const;
  void clear_resume_frequency();
  static const int kResumeFrequencyFieldNumber = 8;
  ::google::protobuf::uint64 resume_frequency() const;
  void set_resume_frequency(::google::protobuf::uint64 value);

  // optional uint32 error_code = 9 [default = 0];
  bool has_error_code() const;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 9;
  ::google::protobuf::uint32 error_code() const;
  void set_error_code(::google::protobuf::uint32 value);

  // optional string error_message = 10 [default = ""];
  bool has_error_message() const;
  void clear_error_message();
  static const int kErrorMessageFieldNumber = 10;
  const ::std::string& error_message() const;
  void set_error_message(const ::std::string& value);
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  ::std::string* mutable_error_message();
  ::std::string* release_error_message();
  void set_allocated_error_message(::std::string* error_message);

  // @@protoc_insertion_point(class_scope:netspeak.generated.Response)
 private:
  inline void set_has_request();
  inline void clear_has_request();
  inline void set_has_query();
  inline void clear_has_query();
  inline void set_has_total_union_size();
  inline void clear_has_total_union_size();
  inline void set_has_total_frequency();
  inline void clear_has_total_frequency();
  inline void set_has_resume_frequency();
  inline void clear_has_resume_frequency();
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_error_message();
  inline void clear_has_error_message();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::netspeak::generated::Request* request_;
  ::google::protobuf::RepeatedPtrField< ::std::string> query_token_;
  ::netspeak::generated::Query* query_;
  ::google::protobuf::RepeatedPtrField< ::netspeak::generated::Phrase > phrase_;
  ::google::protobuf::RepeatedPtrField< ::std::string> unknown_word_;
  ::google::protobuf::uint64 total_union_size_;
  ::google::protobuf::uint64 total_frequency_;
  ::google::protobuf::uint64 resume_frequency_;
  ::google::protobuf::internal::ArenaStringPtr error_message_;
  ::google::protobuf::uint32 error_code_;
  friend void  protobuf_AddDesc_NetspeakMessages_2eproto();
  friend void protobuf_AssignDesc_NetspeakMessages_2eproto();
  friend void protobuf_ShutdownFile_NetspeakMessages_2eproto();

  void InitAsDefaultInstance();
  static Response* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Properties_Property

// optional string key = 1;
inline bool Properties_Property::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Properties_Property::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Properties_Property::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Properties_Property::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& Properties_Property::key() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Properties.Property.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Properties_Property::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:netspeak.generated.Properties.Property.key)
}
inline void Properties_Property::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:netspeak.generated.Properties.Property.key)
}
inline void Properties_Property::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:netspeak.generated.Properties.Property.key)
}
inline ::std::string* Properties_Property::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:netspeak.generated.Properties.Property.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Properties_Property::release_key() {
  // @@protoc_insertion_point(field_release:netspeak.generated.Properties.Property.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Properties_Property::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:netspeak.generated.Properties.Property.key)
}

// optional string value = 2;
inline bool Properties_Property::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Properties_Property::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Properties_Property::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Properties_Property::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& Properties_Property::value() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Properties.Property.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Properties_Property::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:netspeak.generated.Properties.Property.value)
}
inline void Properties_Property::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:netspeak.generated.Properties.Property.value)
}
inline void Properties_Property::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:netspeak.generated.Properties.Property.value)
}
inline ::std::string* Properties_Property::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:netspeak.generated.Properties.Property.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Properties_Property::release_value() {
  // @@protoc_insertion_point(field_release:netspeak.generated.Properties.Property.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Properties_Property::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:netspeak.generated.Properties.Property.value)
}

// -------------------------------------------------------------------

// Properties

// repeated .netspeak.generated.Properties.Property property = 1;
inline int Properties::property_size() const {
  return property_.size();
}
inline void Properties::clear_property() {
  property_.Clear();
}
inline const ::netspeak::generated::Properties_Property& Properties::property(int index) const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Properties.property)
  return property_.Get(index);
}
inline ::netspeak::generated::Properties_Property* Properties::mutable_property(int index) {
  // @@protoc_insertion_point(field_mutable:netspeak.generated.Properties.property)
  return property_.Mutable(index);
}
inline ::netspeak::generated::Properties_Property* Properties::add_property() {
  // @@protoc_insertion_point(field_add:netspeak.generated.Properties.property)
  return property_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::netspeak::generated::Properties_Property >*
Properties::mutable_property() {
  // @@protoc_insertion_point(field_mutable_list:netspeak.generated.Properties.property)
  return &property_;
}
inline const ::google::protobuf::RepeatedPtrField< ::netspeak::generated::Properties_Property >&
Properties::property() const {
  // @@protoc_insertion_point(field_list:netspeak.generated.Properties.property)
  return property_;
}

// -------------------------------------------------------------------

// Query_Unit

// optional .netspeak.generated.Query.Unit.Tag tag = 1 [default = WORD];
inline bool Query_Unit::has_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Query_Unit::set_has_tag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Query_Unit::clear_has_tag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Query_Unit::clear_tag() {
  tag_ = 0;
  clear_has_tag();
}
inline ::netspeak::generated::Query_Unit_Tag Query_Unit::tag() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Query.Unit.tag)
  return static_cast< ::netspeak::generated::Query_Unit_Tag >(tag_);
}
inline void Query_Unit::set_tag(::netspeak::generated::Query_Unit_Tag value) {
  assert(::netspeak::generated::Query_Unit_Tag_IsValid(value));
  set_has_tag();
  tag_ = value;
  // @@protoc_insertion_point(field_set:netspeak.generated.Query.Unit.tag)
}

// optional string text = 2;
inline bool Query_Unit::has_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Query_Unit::set_has_text() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Query_Unit::clear_has_text() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Query_Unit::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
inline const ::std::string& Query_Unit::text() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Query.Unit.text)
  return text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Query_Unit::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:netspeak.generated.Query.Unit.text)
}
inline void Query_Unit::set_text(const char* value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:netspeak.generated.Query.Unit.text)
}
inline void Query_Unit::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:netspeak.generated.Query.Unit.text)
}
inline ::std::string* Query_Unit::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:netspeak.generated.Query.Unit.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Query_Unit::release_text() {
  // @@protoc_insertion_point(field_release:netspeak.generated.Query.Unit.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Query_Unit::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:netspeak.generated.Query.Unit.text)
}

// optional uint32 position = 3 [default = 0];
inline bool Query_Unit::has_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Query_Unit::set_has_position() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Query_Unit::clear_has_position() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Query_Unit::clear_position() {
  position_ = 0u;
  clear_has_position();
}
inline ::google::protobuf::uint32 Query_Unit::position() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Query.Unit.position)
  return position_;
}
inline void Query_Unit::set_position(::google::protobuf::uint32 value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:netspeak.generated.Query.Unit.position)
}

// optional uint64 frequency = 4 [default = 0];
inline bool Query_Unit::has_frequency() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Query_Unit::set_has_frequency() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Query_Unit::clear_has_frequency() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Query_Unit::clear_frequency() {
  frequency_ = GOOGLE_ULONGLONG(0);
  clear_has_frequency();
}
inline ::google::protobuf::uint64 Query_Unit::frequency() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Query.Unit.frequency)
  return frequency_;
}
inline void Query_Unit::set_frequency(::google::protobuf::uint64 value) {
  set_has_frequency();
  frequency_ = value;
  // @@protoc_insertion_point(field_set:netspeak.generated.Query.Unit.frequency)
}

// optional double quantile = 5 [default = 0];
inline bool Query_Unit::has_quantile() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Query_Unit::set_has_quantile() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Query_Unit::clear_has_quantile() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Query_Unit::clear_quantile() {
  quantile_ = 0;
  clear_has_quantile();
}
inline double Query_Unit::quantile() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Query.Unit.quantile)
  return quantile_;
}
inline void Query_Unit::set_quantile(double value) {
  set_has_quantile();
  quantile_ = value;
  // @@protoc_insertion_point(field_set:netspeak.generated.Query.Unit.quantile)
}

// optional uint32 pruning = 6 [default = 0];
inline bool Query_Unit::has_pruning() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Query_Unit::set_has_pruning() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Query_Unit::clear_has_pruning() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Query_Unit::clear_pruning() {
  pruning_ = 0u;
  clear_has_pruning();
}
inline ::google::protobuf::uint32 Query_Unit::pruning() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Query.Unit.pruning)
  return pruning_;
}
inline void Query_Unit::set_pruning(::google::protobuf::uint32 value) {
  set_has_pruning();
  pruning_ = value;
  // @@protoc_insertion_point(field_set:netspeak.generated.Query.Unit.pruning)
}

// -------------------------------------------------------------------

// Query

// repeated .netspeak.generated.Query.Unit unit = 1;
inline int Query::unit_size() const {
  return unit_.size();
}
inline void Query::clear_unit() {
  unit_.Clear();
}
inline const ::netspeak::generated::Query_Unit& Query::unit(int index) const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Query.unit)
  return unit_.Get(index);
}
inline ::netspeak::generated::Query_Unit* Query::mutable_unit(int index) {
  // @@protoc_insertion_point(field_mutable:netspeak.generated.Query.unit)
  return unit_.Mutable(index);
}
inline ::netspeak::generated::Query_Unit* Query::add_unit() {
  // @@protoc_insertion_point(field_add:netspeak.generated.Query.unit)
  return unit_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::netspeak::generated::Query_Unit >*
Query::mutable_unit() {
  // @@protoc_insertion_point(field_mutable_list:netspeak.generated.Query.unit)
  return &unit_;
}
inline const ::google::protobuf::RepeatedPtrField< ::netspeak::generated::Query_Unit >&
Query::unit() const {
  // @@protoc_insertion_point(field_list:netspeak.generated.Query.unit)
  return unit_;
}

// -------------------------------------------------------------------

// Phrase_Word

// optional .netspeak.generated.Phrase.Word.Tag tag = 1 [default = WORD];
inline bool Phrase_Word::has_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Phrase_Word::set_has_tag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Phrase_Word::clear_has_tag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Phrase_Word::clear_tag() {
  tag_ = 0;
  clear_has_tag();
}
inline ::netspeak::generated::Phrase_Word_Tag Phrase_Word::tag() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Phrase.Word.tag)
  return static_cast< ::netspeak::generated::Phrase_Word_Tag >(tag_);
}
inline void Phrase_Word::set_tag(::netspeak::generated::Phrase_Word_Tag value) {
  assert(::netspeak::generated::Phrase_Word_Tag_IsValid(value));
  set_has_tag();
  tag_ = value;
  // @@protoc_insertion_point(field_set:netspeak.generated.Phrase.Word.tag)
}

// optional string text = 2;
inline bool Phrase_Word::has_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Phrase_Word::set_has_text() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Phrase_Word::clear_has_text() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Phrase_Word::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
inline const ::std::string& Phrase_Word::text() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Phrase.Word.text)
  return text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Phrase_Word::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:netspeak.generated.Phrase.Word.text)
}
inline void Phrase_Word::set_text(const char* value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:netspeak.generated.Phrase.Word.text)
}
inline void Phrase_Word::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:netspeak.generated.Phrase.Word.text)
}
inline ::std::string* Phrase_Word::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:netspeak.generated.Phrase.Word.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Phrase_Word::release_text() {
  // @@protoc_insertion_point(field_release:netspeak.generated.Phrase.Word.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Phrase_Word::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:netspeak.generated.Phrase.Word.text)
}

// -------------------------------------------------------------------

// Phrase

// optional uint64 id = 1 [default = 0];
inline bool Phrase::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Phrase::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Phrase::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Phrase::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 Phrase::id() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Phrase.id)
  return id_;
}
inline void Phrase::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:netspeak.generated.Phrase.id)
}

// optional uint64 frequency = 2 [default = 0];
inline bool Phrase::has_frequency() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Phrase::set_has_frequency() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Phrase::clear_has_frequency() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Phrase::clear_frequency() {
  frequency_ = GOOGLE_ULONGLONG(0);
  clear_has_frequency();
}
inline ::google::protobuf::uint64 Phrase::frequency() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Phrase.frequency)
  return frequency_;
}
inline void Phrase::set_frequency(::google::protobuf::uint64 value) {
  set_has_frequency();
  frequency_ = value;
  // @@protoc_insertion_point(field_set:netspeak.generated.Phrase.frequency)
}

// repeated .netspeak.generated.Phrase.Word word = 3;
inline int Phrase::word_size() const {
  return word_.size();
}
inline void Phrase::clear_word() {
  word_.Clear();
}
inline const ::netspeak::generated::Phrase_Word& Phrase::word(int index) const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Phrase.word)
  return word_.Get(index);
}
inline ::netspeak::generated::Phrase_Word* Phrase::mutable_word(int index) {
  // @@protoc_insertion_point(field_mutable:netspeak.generated.Phrase.word)
  return word_.Mutable(index);
}
inline ::netspeak::generated::Phrase_Word* Phrase::add_word() {
  // @@protoc_insertion_point(field_add:netspeak.generated.Phrase.word)
  return word_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::netspeak::generated::Phrase_Word >*
Phrase::mutable_word() {
  // @@protoc_insertion_point(field_mutable_list:netspeak.generated.Phrase.word)
  return &word_;
}
inline const ::google::protobuf::RepeatedPtrField< ::netspeak::generated::Phrase_Word >&
Phrase::word() const {
  // @@protoc_insertion_point(field_list:netspeak.generated.Phrase.word)
  return word_;
}

// -------------------------------------------------------------------

// Request

// optional string query = 1;
inline bool Request::has_query() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request::set_has_query() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Request::clear_has_query() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Request::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
inline const ::std::string& Request::query() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Request.query)
  return query_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:netspeak.generated.Request.query)
}
inline void Request::set_query(const char* value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:netspeak.generated.Request.query)
}
inline void Request::set_query(const char* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:netspeak.generated.Request.query)
}
inline ::std::string* Request::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:netspeak.generated.Request.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_query() {
  // @@protoc_insertion_point(field_release:netspeak.generated.Request.query)
  clear_has_query();
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:netspeak.generated.Request.query)
}

// optional uint32 max_phrase_count = 2 [default = 100];
inline bool Request::has_max_phrase_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Request::set_has_max_phrase_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Request::clear_has_max_phrase_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Request::clear_max_phrase_count() {
  max_phrase_count_ = 100u;
  clear_has_max_phrase_count();
}
inline ::google::protobuf::uint32 Request::max_phrase_count() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Request.max_phrase_count)
  return max_phrase_count_;
}
inline void Request::set_max_phrase_count(::google::protobuf::uint32 value) {
  set_has_max_phrase_count();
  max_phrase_count_ = value;
  // @@protoc_insertion_point(field_set:netspeak.generated.Request.max_phrase_count)
}

// optional uint64 max_phrase_frequency = 3 [default = 0];
inline bool Request::has_max_phrase_frequency() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Request::set_has_max_phrase_frequency() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Request::clear_has_max_phrase_frequency() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Request::clear_max_phrase_frequency() {
  max_phrase_frequency_ = GOOGLE_ULONGLONG(0);
  clear_has_max_phrase_frequency();
}
inline ::google::protobuf::uint64 Request::max_phrase_frequency() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Request.max_phrase_frequency)
  return max_phrase_frequency_;
}
inline void Request::set_max_phrase_frequency(::google::protobuf::uint64 value) {
  set_has_max_phrase_frequency();
  max_phrase_frequency_ = value;
  // @@protoc_insertion_point(field_set:netspeak.generated.Request.max_phrase_frequency)
}

// optional uint32 phrase_length_min = 4 [default = 1];
inline bool Request::has_phrase_length_min() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Request::set_has_phrase_length_min() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Request::clear_has_phrase_length_min() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Request::clear_phrase_length_min() {
  phrase_length_min_ = 1u;
  clear_has_phrase_length_min();
}
inline ::google::protobuf::uint32 Request::phrase_length_min() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Request.phrase_length_min)
  return phrase_length_min_;
}
inline void Request::set_phrase_length_min(::google::protobuf::uint32 value) {
  set_has_phrase_length_min();
  phrase_length_min_ = value;
  // @@protoc_insertion_point(field_set:netspeak.generated.Request.phrase_length_min)
}

// optional uint32 phrase_length_max = 5 [default = 5];
inline bool Request::has_phrase_length_max() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Request::set_has_phrase_length_max() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Request::clear_has_phrase_length_max() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Request::clear_phrase_length_max() {
  phrase_length_max_ = 5u;
  clear_has_phrase_length_max();
}
inline ::google::protobuf::uint32 Request::phrase_length_max() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Request.phrase_length_max)
  return phrase_length_max_;
}
inline void Request::set_phrase_length_max(::google::protobuf::uint32 value) {
  set_has_phrase_length_max();
  phrase_length_max_ = value;
  // @@protoc_insertion_point(field_set:netspeak.generated.Request.phrase_length_max)
}

// optional uint32 pruning_low = 6 [default = 130000];
inline bool Request::has_pruning_low() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Request::set_has_pruning_low() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Request::clear_has_pruning_low() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Request::clear_pruning_low() {
  pruning_low_ = 130000u;
  clear_has_pruning_low();
}
inline ::google::protobuf::uint32 Request::pruning_low() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Request.pruning_low)
  return pruning_low_;
}
inline void Request::set_pruning_low(::google::protobuf::uint32 value) {
  set_has_pruning_low();
  pruning_low_ = value;
  // @@protoc_insertion_point(field_set:netspeak.generated.Request.pruning_low)
}

// optional uint32 pruning_high = 7 [default = 160000];
inline bool Request::has_pruning_high() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Request::set_has_pruning_high() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Request::clear_has_pruning_high() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Request::clear_pruning_high() {
  pruning_high_ = 160000u;
  clear_has_pruning_high();
}
inline ::google::protobuf::uint32 Request::pruning_high() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Request.pruning_high)
  return pruning_high_;
}
inline void Request::set_pruning_high(::google::protobuf::uint32 value) {
  set_has_pruning_high();
  pruning_high_ = value;
  // @@protoc_insertion_point(field_set:netspeak.generated.Request.pruning_high)
}

// optional double quantile_low = 8 [default = 0.5];
inline bool Request::has_quantile_low() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Request::set_has_quantile_low() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Request::clear_has_quantile_low() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Request::clear_quantile_low() {
  quantile_low_ = 0.5;
  clear_has_quantile_low();
}
inline double Request::quantile_low() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Request.quantile_low)
  return quantile_low_;
}
inline void Request::set_quantile_low(double value) {
  set_has_quantile_low();
  quantile_low_ = value;
  // @@protoc_insertion_point(field_set:netspeak.generated.Request.quantile_low)
}

// optional double quantile_high = 9 [default = 0.8];
inline bool Request::has_quantile_high() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Request::set_has_quantile_high() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Request::clear_has_quantile_high() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Request::clear_quantile_high() {
  quantile_high_ = 0.8;
  clear_has_quantile_high();
}
inline double Request::quantile_high() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Request.quantile_high)
  return quantile_high_;
}
inline void Request::set_quantile_high(double value) {
  set_has_quantile_high();
  quantile_high_ = value;
  // @@protoc_insertion_point(field_set:netspeak.generated.Request.quantile_high)
}

// optional uint32 max_regexword_matches = 10 [default = 10];
inline bool Request::has_max_regexword_matches() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Request::set_has_max_regexword_matches() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Request::clear_has_max_regexword_matches() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Request::clear_max_regexword_matches() {
  max_regexword_matches_ = 10u;
  clear_has_max_regexword_matches();
}
inline ::google::protobuf::uint32 Request::max_regexword_matches() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Request.max_regexword_matches)
  return max_regexword_matches_;
}
inline void Request::set_max_regexword_matches(::google::protobuf::uint32 value) {
  set_has_max_regexword_matches();
  max_regexword_matches_ = value;
  // @@protoc_insertion_point(field_set:netspeak.generated.Request.max_regexword_matches)
}

// -------------------------------------------------------------------

// QueryResult_PhraseRef

// optional uint32 query_id = 1 [default = 0];
inline bool QueryResult_PhraseRef::has_query_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryResult_PhraseRef::set_has_query_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryResult_PhraseRef::clear_has_query_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryResult_PhraseRef::clear_query_id() {
  query_id_ = 0u;
  clear_has_query_id();
}
inline ::google::protobuf::uint32 QueryResult_PhraseRef::query_id() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.QueryResult.PhraseRef.query_id)
  return query_id_;
}
inline void QueryResult_PhraseRef::set_query_id(::google::protobuf::uint32 value) {
  set_has_query_id();
  query_id_ = value;
  // @@protoc_insertion_point(field_set:netspeak.generated.QueryResult.PhraseRef.query_id)
}

// optional uint32 frequency = 2 [default = 0];
inline bool QueryResult_PhraseRef::has_frequency() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryResult_PhraseRef::set_has_frequency() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryResult_PhraseRef::clear_has_frequency() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryResult_PhraseRef::clear_frequency() {
  frequency_ = 0u;
  clear_has_frequency();
}
inline ::google::protobuf::uint32 QueryResult_PhraseRef::frequency() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.QueryResult.PhraseRef.frequency)
  return frequency_;
}
inline void QueryResult_PhraseRef::set_frequency(::google::protobuf::uint32 value) {
  set_has_frequency();
  frequency_ = value;
  // @@protoc_insertion_point(field_set:netspeak.generated.QueryResult.PhraseRef.frequency)
}

// optional uint32 length = 3 [default = 0];
inline bool QueryResult_PhraseRef::has_length() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QueryResult_PhraseRef::set_has_length() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QueryResult_PhraseRef::clear_has_length() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QueryResult_PhraseRef::clear_length() {
  length_ = 0u;
  clear_has_length();
}
inline ::google::protobuf::uint32 QueryResult_PhraseRef::length() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.QueryResult.PhraseRef.length)
  return length_;
}
inline void QueryResult_PhraseRef::set_length(::google::protobuf::uint32 value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:netspeak.generated.QueryResult.PhraseRef.length)
}

// optional uint32 id = 4 [default = 0];
inline bool QueryResult_PhraseRef::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QueryResult_PhraseRef::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QueryResult_PhraseRef::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QueryResult_PhraseRef::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 QueryResult_PhraseRef::id() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.QueryResult.PhraseRef.id)
  return id_;
}
inline void QueryResult_PhraseRef::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:netspeak.generated.QueryResult.PhraseRef.id)
}

// -------------------------------------------------------------------

// QueryResult

// optional .netspeak.generated.Query query = 1;
inline bool QueryResult::has_query() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryResult::set_has_query() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryResult::clear_has_query() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryResult::clear_query() {
  if (query_ != NULL) query_->::netspeak::generated::Query::Clear();
  clear_has_query();
}
inline const ::netspeak::generated::Query& QueryResult::query() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.QueryResult.query)
  return query_ != NULL ? *query_ : *default_instance_->query_;
}
inline ::netspeak::generated::Query* QueryResult::mutable_query() {
  set_has_query();
  if (query_ == NULL) {
    query_ = new ::netspeak::generated::Query;
  }
  // @@protoc_insertion_point(field_mutable:netspeak.generated.QueryResult.query)
  return query_;
}
inline ::netspeak::generated::Query* QueryResult::release_query() {
  // @@protoc_insertion_point(field_release:netspeak.generated.QueryResult.query)
  clear_has_query();
  ::netspeak::generated::Query* temp = query_;
  query_ = NULL;
  return temp;
}
inline void QueryResult::set_allocated_query(::netspeak::generated::Query* query) {
  delete query_;
  query_ = query;
  if (query) {
    set_has_query();
  } else {
    clear_has_query();
  }
  // @@protoc_insertion_point(field_set_allocated:netspeak.generated.QueryResult.query)
}

// optional .netspeak.generated.Request request = 2;
inline bool QueryResult::has_request() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryResult::set_has_request() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryResult::clear_has_request() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryResult::clear_request() {
  if (request_ != NULL) request_->::netspeak::generated::Request::Clear();
  clear_has_request();
}
inline const ::netspeak::generated::Request& QueryResult::request() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.QueryResult.request)
  return request_ != NULL ? *request_ : *default_instance_->request_;
}
inline ::netspeak::generated::Request* QueryResult::mutable_request() {
  set_has_request();
  if (request_ == NULL) {
    request_ = new ::netspeak::generated::Request;
  }
  // @@protoc_insertion_point(field_mutable:netspeak.generated.QueryResult.request)
  return request_;
}
inline ::netspeak::generated::Request* QueryResult::release_request() {
  // @@protoc_insertion_point(field_release:netspeak.generated.QueryResult.request)
  clear_has_request();
  ::netspeak::generated::Request* temp = request_;
  request_ = NULL;
  return temp;
}
inline void QueryResult::set_allocated_request(::netspeak::generated::Request* request) {
  delete request_;
  request_ = request;
  if (request) {
    set_has_request();
  } else {
    clear_has_request();
  }
  // @@protoc_insertion_point(field_set_allocated:netspeak.generated.QueryResult.request)
}

// repeated .netspeak.generated.QueryResult.PhraseRef reference = 3;
inline int QueryResult::reference_size() const {
  return reference_.size();
}
inline void QueryResult::clear_reference() {
  reference_.Clear();
}
inline const ::netspeak::generated::QueryResult_PhraseRef& QueryResult::reference(int index) const {
  // @@protoc_insertion_point(field_get:netspeak.generated.QueryResult.reference)
  return reference_.Get(index);
}
inline ::netspeak::generated::QueryResult_PhraseRef* QueryResult::mutable_reference(int index) {
  // @@protoc_insertion_point(field_mutable:netspeak.generated.QueryResult.reference)
  return reference_.Mutable(index);
}
inline ::netspeak::generated::QueryResult_PhraseRef* QueryResult::add_reference() {
  // @@protoc_insertion_point(field_add:netspeak.generated.QueryResult.reference)
  return reference_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::netspeak::generated::QueryResult_PhraseRef >*
QueryResult::mutable_reference() {
  // @@protoc_insertion_point(field_mutable_list:netspeak.generated.QueryResult.reference)
  return &reference_;
}
inline const ::google::protobuf::RepeatedPtrField< ::netspeak::generated::QueryResult_PhraseRef >&
QueryResult::reference() const {
  // @@protoc_insertion_point(field_list:netspeak.generated.QueryResult.reference)
  return reference_;
}

// optional .netspeak.generated.Phrase phrase = 4;
inline bool QueryResult::has_phrase() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QueryResult::set_has_phrase() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QueryResult::clear_has_phrase() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QueryResult::clear_phrase() {
  if (phrase_ != NULL) phrase_->::netspeak::generated::Phrase::Clear();
  clear_has_phrase();
}
inline const ::netspeak::generated::Phrase& QueryResult::phrase() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.QueryResult.phrase)
  return phrase_ != NULL ? *phrase_ : *default_instance_->phrase_;
}
inline ::netspeak::generated::Phrase* QueryResult::mutable_phrase() {
  set_has_phrase();
  if (phrase_ == NULL) {
    phrase_ = new ::netspeak::generated::Phrase;
  }
  // @@protoc_insertion_point(field_mutable:netspeak.generated.QueryResult.phrase)
  return phrase_;
}
inline ::netspeak::generated::Phrase* QueryResult::release_phrase() {
  // @@protoc_insertion_point(field_release:netspeak.generated.QueryResult.phrase)
  clear_has_phrase();
  ::netspeak::generated::Phrase* temp = phrase_;
  phrase_ = NULL;
  return temp;
}
inline void QueryResult::set_allocated_phrase(::netspeak::generated::Phrase* phrase) {
  delete phrase_;
  phrase_ = phrase;
  if (phrase) {
    set_has_phrase();
  } else {
    clear_has_phrase();
  }
  // @@protoc_insertion_point(field_set_allocated:netspeak.generated.QueryResult.phrase)
}

// optional uint64 union_size = 5 [default = 0];
inline bool QueryResult::has_union_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QueryResult::set_has_union_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QueryResult::clear_has_union_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QueryResult::clear_union_size() {
  union_size_ = GOOGLE_ULONGLONG(0);
  clear_has_union_size();
}
inline ::google::protobuf::uint64 QueryResult::union_size() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.QueryResult.union_size)
  return union_size_;
}
inline void QueryResult::set_union_size(::google::protobuf::uint64 value) {
  set_has_union_size();
  union_size_ = value;
  // @@protoc_insertion_point(field_set:netspeak.generated.QueryResult.union_size)
}

// repeated string unknown_word = 6;
inline int QueryResult::unknown_word_size() const {
  return unknown_word_.size();
}
inline void QueryResult::clear_unknown_word() {
  unknown_word_.Clear();
}
inline const ::std::string& QueryResult::unknown_word(int index) const {
  // @@protoc_insertion_point(field_get:netspeak.generated.QueryResult.unknown_word)
  return unknown_word_.Get(index);
}
inline ::std::string* QueryResult::mutable_unknown_word(int index) {
  // @@protoc_insertion_point(field_mutable:netspeak.generated.QueryResult.unknown_word)
  return unknown_word_.Mutable(index);
}
inline void QueryResult::set_unknown_word(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:netspeak.generated.QueryResult.unknown_word)
  unknown_word_.Mutable(index)->assign(value);
}
inline void QueryResult::set_unknown_word(int index, const char* value) {
  unknown_word_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:netspeak.generated.QueryResult.unknown_word)
}
inline void QueryResult::set_unknown_word(int index, const char* value, size_t size) {
  unknown_word_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:netspeak.generated.QueryResult.unknown_word)
}
inline ::std::string* QueryResult::add_unknown_word() {
  // @@protoc_insertion_point(field_add_mutable:netspeak.generated.QueryResult.unknown_word)
  return unknown_word_.Add();
}
inline void QueryResult::add_unknown_word(const ::std::string& value) {
  unknown_word_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:netspeak.generated.QueryResult.unknown_word)
}
inline void QueryResult::add_unknown_word(const char* value) {
  unknown_word_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:netspeak.generated.QueryResult.unknown_word)
}
inline void QueryResult::add_unknown_word(const char* value, size_t size) {
  unknown_word_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:netspeak.generated.QueryResult.unknown_word)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
QueryResult::unknown_word() const {
  // @@protoc_insertion_point(field_list:netspeak.generated.QueryResult.unknown_word)
  return unknown_word_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
QueryResult::mutable_unknown_word() {
  // @@protoc_insertion_point(field_mutable_list:netspeak.generated.QueryResult.unknown_word)
  return &unknown_word_;
}

// -------------------------------------------------------------------

// RawResponse

// optional .netspeak.generated.Request request = 1;
inline bool RawResponse::has_request() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RawResponse::set_has_request() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RawResponse::clear_has_request() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RawResponse::clear_request() {
  if (request_ != NULL) request_->::netspeak::generated::Request::Clear();
  clear_has_request();
}
inline const ::netspeak::generated::Request& RawResponse::request() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.RawResponse.request)
  return request_ != NULL ? *request_ : *default_instance_->request_;
}
inline ::netspeak::generated::Request* RawResponse::mutable_request() {
  set_has_request();
  if (request_ == NULL) {
    request_ = new ::netspeak::generated::Request;
  }
  // @@protoc_insertion_point(field_mutable:netspeak.generated.RawResponse.request)
  return request_;
}
inline ::netspeak::generated::Request* RawResponse::release_request() {
  // @@protoc_insertion_point(field_release:netspeak.generated.RawResponse.request)
  clear_has_request();
  ::netspeak::generated::Request* temp = request_;
  request_ = NULL;
  return temp;
}
inline void RawResponse::set_allocated_request(::netspeak::generated::Request* request) {
  delete request_;
  request_ = request;
  if (request) {
    set_has_request();
  } else {
    clear_has_request();
  }
  // @@protoc_insertion_point(field_set_allocated:netspeak.generated.RawResponse.request)
}

// repeated string query_token = 2;
inline int RawResponse::query_token_size() const {
  return query_token_.size();
}
inline void RawResponse::clear_query_token() {
  query_token_.Clear();
}
inline const ::std::string& RawResponse::query_token(int index) const {
  // @@protoc_insertion_point(field_get:netspeak.generated.RawResponse.query_token)
  return query_token_.Get(index);
}
inline ::std::string* RawResponse::mutable_query_token(int index) {
  // @@protoc_insertion_point(field_mutable:netspeak.generated.RawResponse.query_token)
  return query_token_.Mutable(index);
}
inline void RawResponse::set_query_token(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:netspeak.generated.RawResponse.query_token)
  query_token_.Mutable(index)->assign(value);
}
inline void RawResponse::set_query_token(int index, const char* value) {
  query_token_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:netspeak.generated.RawResponse.query_token)
}
inline void RawResponse::set_query_token(int index, const char* value, size_t size) {
  query_token_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:netspeak.generated.RawResponse.query_token)
}
inline ::std::string* RawResponse::add_query_token() {
  // @@protoc_insertion_point(field_add_mutable:netspeak.generated.RawResponse.query_token)
  return query_token_.Add();
}
inline void RawResponse::add_query_token(const ::std::string& value) {
  query_token_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:netspeak.generated.RawResponse.query_token)
}
inline void RawResponse::add_query_token(const char* value) {
  query_token_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:netspeak.generated.RawResponse.query_token)
}
inline void RawResponse::add_query_token(const char* value, size_t size) {
  query_token_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:netspeak.generated.RawResponse.query_token)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RawResponse::query_token() const {
  // @@protoc_insertion_point(field_list:netspeak.generated.RawResponse.query_token)
  return query_token_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RawResponse::mutable_query_token() {
  // @@protoc_insertion_point(field_mutable_list:netspeak.generated.RawResponse.query_token)
  return &query_token_;
}

// optional .netspeak.generated.Query query = 3;
inline bool RawResponse::has_query() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RawResponse::set_has_query() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RawResponse::clear_has_query() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RawResponse::clear_query() {
  if (query_ != NULL) query_->::netspeak::generated::Query::Clear();
  clear_has_query();
}
inline const ::netspeak::generated::Query& RawResponse::query() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.RawResponse.query)
  return query_ != NULL ? *query_ : *default_instance_->query_;
}
inline ::netspeak::generated::Query* RawResponse::mutable_query() {
  set_has_query();
  if (query_ == NULL) {
    query_ = new ::netspeak::generated::Query;
  }
  // @@protoc_insertion_point(field_mutable:netspeak.generated.RawResponse.query)
  return query_;
}
inline ::netspeak::generated::Query* RawResponse::release_query() {
  // @@protoc_insertion_point(field_release:netspeak.generated.RawResponse.query)
  clear_has_query();
  ::netspeak::generated::Query* temp = query_;
  query_ = NULL;
  return temp;
}
inline void RawResponse::set_allocated_query(::netspeak::generated::Query* query) {
  delete query_;
  query_ = query;
  if (query) {
    set_has_query();
  } else {
    clear_has_query();
  }
  // @@protoc_insertion_point(field_set_allocated:netspeak.generated.RawResponse.query)
}

// repeated .netspeak.generated.QueryResult query_result = 4;
inline int RawResponse::query_result_size() const {
  return query_result_.size();
}
inline void RawResponse::clear_query_result() {
  query_result_.Clear();
}
inline const ::netspeak::generated::QueryResult& RawResponse::query_result(int index) const {
  // @@protoc_insertion_point(field_get:netspeak.generated.RawResponse.query_result)
  return query_result_.Get(index);
}
inline ::netspeak::generated::QueryResult* RawResponse::mutable_query_result(int index) {
  // @@protoc_insertion_point(field_mutable:netspeak.generated.RawResponse.query_result)
  return query_result_.Mutable(index);
}
inline ::netspeak::generated::QueryResult* RawResponse::add_query_result() {
  // @@protoc_insertion_point(field_add:netspeak.generated.RawResponse.query_result)
  return query_result_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::netspeak::generated::QueryResult >*
RawResponse::mutable_query_result() {
  // @@protoc_insertion_point(field_mutable_list:netspeak.generated.RawResponse.query_result)
  return &query_result_;
}
inline const ::google::protobuf::RepeatedPtrField< ::netspeak::generated::QueryResult >&
RawResponse::query_result() const {
  // @@protoc_insertion_point(field_list:netspeak.generated.RawResponse.query_result)
  return query_result_;
}

// optional uint32 error_code = 5 [default = 0];
inline bool RawResponse::has_error_code() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RawResponse::set_has_error_code() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RawResponse::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RawResponse::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 RawResponse::error_code() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.RawResponse.error_code)
  return error_code_;
}
inline void RawResponse::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:netspeak.generated.RawResponse.error_code)
}

// optional string error_message = 6;
inline bool RawResponse::has_error_message() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RawResponse::set_has_error_message() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RawResponse::clear_has_error_message() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RawResponse::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_message();
}
inline const ::std::string& RawResponse::error_message() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.RawResponse.error_message)
  return error_message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RawResponse::set_error_message(const ::std::string& value) {
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:netspeak.generated.RawResponse.error_message)
}
inline void RawResponse::set_error_message(const char* value) {
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:netspeak.generated.RawResponse.error_message)
}
inline void RawResponse::set_error_message(const char* value, size_t size) {
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:netspeak.generated.RawResponse.error_message)
}
inline ::std::string* RawResponse::mutable_error_message() {
  set_has_error_message();
  // @@protoc_insertion_point(field_mutable:netspeak.generated.RawResponse.error_message)
  return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RawResponse::release_error_message() {
  // @@protoc_insertion_point(field_release:netspeak.generated.RawResponse.error_message)
  clear_has_error_message();
  return error_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RawResponse::set_allocated_error_message(::std::string* error_message) {
  if (error_message != NULL) {
    set_has_error_message();
  } else {
    clear_has_error_message();
  }
  error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:netspeak.generated.RawResponse.error_message)
}

// -------------------------------------------------------------------

// Response

// optional .netspeak.generated.Request request = 1;
inline bool Response::has_request() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response::set_has_request() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Response::clear_has_request() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Response::clear_request() {
  if (request_ != NULL) request_->::netspeak::generated::Request::Clear();
  clear_has_request();
}
inline const ::netspeak::generated::Request& Response::request() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Response.request)
  return request_ != NULL ? *request_ : *default_instance_->request_;
}
inline ::netspeak::generated::Request* Response::mutable_request() {
  set_has_request();
  if (request_ == NULL) {
    request_ = new ::netspeak::generated::Request;
  }
  // @@protoc_insertion_point(field_mutable:netspeak.generated.Response.request)
  return request_;
}
inline ::netspeak::generated::Request* Response::release_request() {
  // @@protoc_insertion_point(field_release:netspeak.generated.Response.request)
  clear_has_request();
  ::netspeak::generated::Request* temp = request_;
  request_ = NULL;
  return temp;
}
inline void Response::set_allocated_request(::netspeak::generated::Request* request) {
  delete request_;
  request_ = request;
  if (request) {
    set_has_request();
  } else {
    clear_has_request();
  }
  // @@protoc_insertion_point(field_set_allocated:netspeak.generated.Response.request)
}

// repeated string query_token = 2;
inline int Response::query_token_size() const {
  return query_token_.size();
}
inline void Response::clear_query_token() {
  query_token_.Clear();
}
inline const ::std::string& Response::query_token(int index) const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Response.query_token)
  return query_token_.Get(index);
}
inline ::std::string* Response::mutable_query_token(int index) {
  // @@protoc_insertion_point(field_mutable:netspeak.generated.Response.query_token)
  return query_token_.Mutable(index);
}
inline void Response::set_query_token(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:netspeak.generated.Response.query_token)
  query_token_.Mutable(index)->assign(value);
}
inline void Response::set_query_token(int index, const char* value) {
  query_token_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:netspeak.generated.Response.query_token)
}
inline void Response::set_query_token(int index, const char* value, size_t size) {
  query_token_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:netspeak.generated.Response.query_token)
}
inline ::std::string* Response::add_query_token() {
  // @@protoc_insertion_point(field_add_mutable:netspeak.generated.Response.query_token)
  return query_token_.Add();
}
inline void Response::add_query_token(const ::std::string& value) {
  query_token_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:netspeak.generated.Response.query_token)
}
inline void Response::add_query_token(const char* value) {
  query_token_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:netspeak.generated.Response.query_token)
}
inline void Response::add_query_token(const char* value, size_t size) {
  query_token_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:netspeak.generated.Response.query_token)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Response::query_token() const {
  // @@protoc_insertion_point(field_list:netspeak.generated.Response.query_token)
  return query_token_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Response::mutable_query_token() {
  // @@protoc_insertion_point(field_mutable_list:netspeak.generated.Response.query_token)
  return &query_token_;
}

// optional .netspeak.generated.Query query = 3;
inline bool Response::has_query() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Response::set_has_query() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Response::clear_has_query() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Response::clear_query() {
  if (query_ != NULL) query_->::netspeak::generated::Query::Clear();
  clear_has_query();
}
inline const ::netspeak::generated::Query& Response::query() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Response.query)
  return query_ != NULL ? *query_ : *default_instance_->query_;
}
inline ::netspeak::generated::Query* Response::mutable_query() {
  set_has_query();
  if (query_ == NULL) {
    query_ = new ::netspeak::generated::Query;
  }
  // @@protoc_insertion_point(field_mutable:netspeak.generated.Response.query)
  return query_;
}
inline ::netspeak::generated::Query* Response::release_query() {
  // @@protoc_insertion_point(field_release:netspeak.generated.Response.query)
  clear_has_query();
  ::netspeak::generated::Query* temp = query_;
  query_ = NULL;
  return temp;
}
inline void Response::set_allocated_query(::netspeak::generated::Query* query) {
  delete query_;
  query_ = query;
  if (query) {
    set_has_query();
  } else {
    clear_has_query();
  }
  // @@protoc_insertion_point(field_set_allocated:netspeak.generated.Response.query)
}

// repeated .netspeak.generated.Phrase phrase = 4;
inline int Response::phrase_size() const {
  return phrase_.size();
}
inline void Response::clear_phrase() {
  phrase_.Clear();
}
inline const ::netspeak::generated::Phrase& Response::phrase(int index) const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Response.phrase)
  return phrase_.Get(index);
}
inline ::netspeak::generated::Phrase* Response::mutable_phrase(int index) {
  // @@protoc_insertion_point(field_mutable:netspeak.generated.Response.phrase)
  return phrase_.Mutable(index);
}
inline ::netspeak::generated::Phrase* Response::add_phrase() {
  // @@protoc_insertion_point(field_add:netspeak.generated.Response.phrase)
  return phrase_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::netspeak::generated::Phrase >*
Response::mutable_phrase() {
  // @@protoc_insertion_point(field_mutable_list:netspeak.generated.Response.phrase)
  return &phrase_;
}
inline const ::google::protobuf::RepeatedPtrField< ::netspeak::generated::Phrase >&
Response::phrase() const {
  // @@protoc_insertion_point(field_list:netspeak.generated.Response.phrase)
  return phrase_;
}

// repeated string unknown_word = 5;
inline int Response::unknown_word_size() const {
  return unknown_word_.size();
}
inline void Response::clear_unknown_word() {
  unknown_word_.Clear();
}
inline const ::std::string& Response::unknown_word(int index) const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Response.unknown_word)
  return unknown_word_.Get(index);
}
inline ::std::string* Response::mutable_unknown_word(int index) {
  // @@protoc_insertion_point(field_mutable:netspeak.generated.Response.unknown_word)
  return unknown_word_.Mutable(index);
}
inline void Response::set_unknown_word(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:netspeak.generated.Response.unknown_word)
  unknown_word_.Mutable(index)->assign(value);
}
inline void Response::set_unknown_word(int index, const char* value) {
  unknown_word_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:netspeak.generated.Response.unknown_word)
}
inline void Response::set_unknown_word(int index, const char* value, size_t size) {
  unknown_word_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:netspeak.generated.Response.unknown_word)
}
inline ::std::string* Response::add_unknown_word() {
  // @@protoc_insertion_point(field_add_mutable:netspeak.generated.Response.unknown_word)
  return unknown_word_.Add();
}
inline void Response::add_unknown_word(const ::std::string& value) {
  unknown_word_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:netspeak.generated.Response.unknown_word)
}
inline void Response::add_unknown_word(const char* value) {
  unknown_word_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:netspeak.generated.Response.unknown_word)
}
inline void Response::add_unknown_word(const char* value, size_t size) {
  unknown_word_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:netspeak.generated.Response.unknown_word)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Response::unknown_word() const {
  // @@protoc_insertion_point(field_list:netspeak.generated.Response.unknown_word)
  return unknown_word_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Response::mutable_unknown_word() {
  // @@protoc_insertion_point(field_mutable_list:netspeak.generated.Response.unknown_word)
  return &unknown_word_;
}

// optional uint64 total_union_size = 6 [default = 0];
inline bool Response::has_total_union_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Response::set_has_total_union_size() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Response::clear_has_total_union_size() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Response::clear_total_union_size() {
  total_union_size_ = GOOGLE_ULONGLONG(0);
  clear_has_total_union_size();
}
inline ::google::protobuf::uint64 Response::total_union_size() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Response.total_union_size)
  return total_union_size_;
}
inline void Response::set_total_union_size(::google::protobuf::uint64 value) {
  set_has_total_union_size();
  total_union_size_ = value;
  // @@protoc_insertion_point(field_set:netspeak.generated.Response.total_union_size)
}

// optional uint64 total_frequency = 7 [default = 0];
inline bool Response::has_total_frequency() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Response::set_has_total_frequency() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Response::clear_has_total_frequency() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Response::clear_total_frequency() {
  total_frequency_ = GOOGLE_ULONGLONG(0);
  clear_has_total_frequency();
}
inline ::google::protobuf::uint64 Response::total_frequency() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Response.total_frequency)
  return total_frequency_;
}
inline void Response::set_total_frequency(::google::protobuf::uint64 value) {
  set_has_total_frequency();
  total_frequency_ = value;
  // @@protoc_insertion_point(field_set:netspeak.generated.Response.total_frequency)
}

// optional uint64 resume_frequency = 8 [default = 0];
inline bool Response::has_resume_frequency() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Response::set_has_resume_frequency() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Response::clear_has_resume_frequency() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Response::clear_resume_frequency() {
  resume_frequency_ = GOOGLE_ULONGLONG(0);
  clear_has_resume_frequency();
}
inline ::google::protobuf::uint64 Response::resume_frequency() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Response.resume_frequency)
  return resume_frequency_;
}
inline void Response::set_resume_frequency(::google::protobuf::uint64 value) {
  set_has_resume_frequency();
  resume_frequency_ = value;
  // @@protoc_insertion_point(field_set:netspeak.generated.Response.resume_frequency)
}

// optional uint32 error_code = 9 [default = 0];
inline bool Response::has_error_code() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Response::set_has_error_code() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Response::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Response::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 Response::error_code() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Response.error_code)
  return error_code_;
}
inline void Response::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:netspeak.generated.Response.error_code)
}

// optional string error_message = 10 [default = ""];
inline bool Response::has_error_message() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Response::set_has_error_message() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Response::clear_has_error_message() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Response::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_message();
}
inline const ::std::string& Response::error_message() const {
  // @@protoc_insertion_point(field_get:netspeak.generated.Response.error_message)
  return error_message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_error_message(const ::std::string& value) {
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:netspeak.generated.Response.error_message)
}
inline void Response::set_error_message(const char* value) {
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:netspeak.generated.Response.error_message)
}
inline void Response::set_error_message(const char* value, size_t size) {
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:netspeak.generated.Response.error_message)
}
inline ::std::string* Response::mutable_error_message() {
  set_has_error_message();
  // @@protoc_insertion_point(field_mutable:netspeak.generated.Response.error_message)
  return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Response::release_error_message() {
  // @@protoc_insertion_point(field_release:netspeak.generated.Response.error_message)
  clear_has_error_message();
  return error_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_allocated_error_message(::std::string* error_message) {
  if (error_message != NULL) {
    set_has_error_message();
  } else {
    clear_has_error_message();
  }
  error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:netspeak.generated.Response.error_message)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace generated
}  // namespace netspeak

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::netspeak::generated::Query_Unit_Tag> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::netspeak::generated::Query_Unit_Tag>() {
  return ::netspeak::generated::Query_Unit_Tag_descriptor();
}
template <> struct is_proto_enum< ::netspeak::generated::Phrase_Word_Tag> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::netspeak::generated::Phrase_Word_Tag>() {
  return ::netspeak::generated::Phrase_Word_Tag_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_NetspeakMessages_2eproto__INCLUDED
