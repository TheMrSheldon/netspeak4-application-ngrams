name: Publish Docker image

on:
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  debian-package:
    name: Build Debian Package
    runs-on: ubuntu-24.04
    permissions:
      contents: write
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test
          sudo apt-get update
          sudo apt-get -y install g++-13 protobuf-compiler libsystemd-dev libssl-dev default-jre pkg-config libboost-all-dev libcmph-dev libicu-dev libgrpc++-dev protobuf-compiler-grpc
      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a
        # single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=MinSizeRel -D CMAKE_C_COMPILER=gcc-13 -D CMAKE_CXX_COMPILER=g++-13 -D NETSPEAK_BUILD_TESTS=NO -D NETSPEAK_BUILD_DOCS=NO -D NETSPEAK_BUILD_DEB=YES
      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config MinSizeRel --target package
      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          files: ${{github.workspace}}/build/netspeakcli-5.0.0rc-Linux.deb

  docker-image:
    name: Push Docker image to GHCR
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Log in to GHCR
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - name: Build and push Docker image
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          file: Dockerfile.prod
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
